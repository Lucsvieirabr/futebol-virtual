{
  "resolvedId": "/Users/leonardohumbert/Downloads/sistema-futebol-online/nuxt/pages/home.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <div class=\"w-auto h-auto\">\n    <div class=\"max-w-2xl mx-auto mb-5\">\n      <!-- Título -->\n      <h1 class=\"text-2xl font-bold text-center mb-4 text-blue-500\">\n        Ferramenta BBTips\n      </h1>\n\n      <!-- PrimeTextArea -->\n      <div class=\"mb-4\">\n        <span class=\"block text-gray-700 font-medium mb-2\"\n          >Dados para Análise</span\n        >\n        <PrimeTextarea\n          v-model=\"dadosAnalise\"\n          placeholder=\"Insira os dados\"\n          class=\"w-full\"\n          rows=\"4\"\n        />\n      </div>\n\n      <!-- Linha com Select e File Input -->\n      <div class=\"flex gap-4\">\n        <!-- Select de Campeonato -->\n        <div class=\"w-1/2\">\n          <PrimeDropdown\n            v-model=\"campeonatoSelecionado\"\n            :options=\"campeonatos\"\n            option-label=\"label\"\n            option-value=\"value\"\n            placeholder=\"Selecione um campeonato\"\n            class=\"w-full\"\n          />\n        </div>\n\n        <PrimeButton\n          label=\"Analisar\"\n          severity=\"success\"\n          class=\"w-full\"\n          @click=\"onClickAnalisar\"\n        />\n      </div>\n    </div>\n\n    <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 p-5\" v-if=\"showRanks\">\n      <div\n        v-for=\"(rank, index) in rankings\"\n        :key=\"index\"\n        class=\"bg-white shadow-lg rounded-xl p-2\"\n      >\n        <h2 class=\"text-lg font-semibold text-gray-700 text-center mb-4\">\n          {{ rank.title }}\n        </h2>\n        <table class=\"w-full border-collapse border border-gray-300\">\n          <thead>\n            <tr class=\"bg-gray-100\">\n              <th class=\"border border-gray-300 px-2 py-2\">#</th>\n              <th class=\"border border-gray-300 px-2 py-2\">Time</th>\n              <th class=\"border border-gray-300 px-2 py-2\">Valor</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr\n              v-for=\"(team, i) in rank.data\"\n              :key=\"team.team\"\n              class=\"odd:bg-gray-50 even:bg-white\"\n            >\n              <td class=\"border border-gray-300 px-2 py-2 text-center\">\n                {{ i + 1 }}\n              </td>\n              <td class=\"border border-gray-300 px-2 py-2\">{{ team.team }}</td>\n              <td class=\"border border-gray-300 px-2 py-2 text-center\">\n                {{ team.value }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <!-- Tabela e Gráficos -->\n    <div id=\"graficos\">\n      <div>\n        <div id=\"controlesUnderOver\" style=\"margin-bottom: 20px\"></div>\n        <canvas id=\"graficoUnderOver\"></canvas>\n        <div class=\"table\">\n          <PrimeButton type=\"button\" class=\"btnTables\" @click=\"showTable1 = !showTable1\">\n            Mostrar/Esconder Tabela\n          </PrimeButton>\n          <table id=\"tabelao25\" v-show=\"showTable1\"></table>\n        </div>\n      </div>\n      <div>\n        <div id=\"controlesAmbas\" style=\"margin-bottom: 20px\"></div>\n        <canvas id=\"graficoAmbas\"></canvas>\n        <div class=\"table\">\n          <PrimeButton type=\"button\" class=\"btnTables\" @click=\"showTable2 = !showTable2\">\n            Mostrar/Esconder Tabela\n          </PrimeButton>\n          <table id=\"tabelaambas\" v-show=\"showTable2\"></table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \"vue\";\nimport { Chart } from \"chart.js\";\nconst dadosAnalise = ref(\"\");\nconst showRanks = ref(false);\nconst campeonatoSelecionado = ref(null);\nconst showTable1 = ref(true);\nconst showTable2 = ref(true);\nconst rankings = ref([]);\nconst campeonatos = ref([\n  { label: \"Copa\", value: \"copa\" },\n  { label: \"Euro\", value: \"euro\" },\n  { label: \"Super\", value: \"super\" },\n  { label: \"Premier\", value: \"premier\" },\n]);\n\nfunction extrairGols(partida) {\n  const placar = partida.match(/(\\d+)-(\\d+)/);\n  if (placar) {\n    return parseInt(placar[1]) + parseInt(placar[2]);\n  }\n  return 0;\n}\nconst calculateChamaGol = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const golsPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!golsPorTime[partida.team]) {\n        golsPorTime[partida.team] = [];\n      }\n      golsPorTime[partida.team].push(partida.goals);\n    });\n  });\n\n  const medias = Object.entries(golsPorTime).map(([time, gols]) => {\n    const soma = gols.reduce((acc, gol) => acc + gol, 0);\n    return { team: time, value: (soma / gols.length).toFixed(2) };\n  });\n\n  return medias.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\nconst calculateMaximaMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0] };\n    })\n  );\n\n  const medias = resultados.flat().map((partida) => {\n    const streak = Math.floor(Math.random() * 6);\n    const avg = (streak + Math.random() * 5).toFixed(2);\n    return { team: partida.team, value: `${streak} / ${avg}` };\n  });\n\n  return medias\n    .sort((a, b) => b.value.split(\" / \")[1] - a.value.split(\" / \")[1])\n    .slice(0, 5);\n};\n\nconst calculateAncoraMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const pontosPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!pontosPorTime[partida.team]) {\n        pontosPorTime[partida.team] = 0;\n      }\n      pontosPorTime[partida.team] += partida.goals >= 5 ? 1 : 0;\n    });\n  });\n\n  const pontos = Object.entries(pontosPorTime).map(([time, pontos]) => ({\n    team: time,\n    value: pontos,\n  }));\n\n  return pontos.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\ndefinePageMeta({\n  layout: \"home\",\n  middleware: [],\n});\n\nconst handleFileUpload = (event) => {\n  console.log(\"Arquivo selecionado:\", event.files);\n};\n\n// Função dos graficos\n\nconst onClickAnalisar = () => {\n  const resultadoAnalise = document.getElementById(\"graficos\");\n  showRanks.value = true;\n  if (!resultadoAnalise) {\n    console.error(\"Elemento #graficos não encontrado.\");\n    return;\n  }\n\n  resultadoAnalise.style.display = \"block\";\n  gerarTabelaEGraficos();\n};\n\nlet chartUnderOver = null;\nlet chartAmbas = null;\n\n\n// for (let index = 0; index < tables.length; index++) {\n//   buttons[index].addEventListener(\"click\", () => {\n//     mostrarEsconderTabela(tables[index]);\n//   });\n// }\n\nconst mercadosUnderOver = [\"under25\", \"over25\"];\nconst mercadosAmbas = [\"ambasNao\", \"ambas\"];\n\nconst todasCores = {\n  under25: \"#f53246\",\n  over25: \"#6bf58b\",\n  ambas: \"#6bf58b\",\n  ambasNao: \"#f53246\",\n};\n\nfunction gerarTabelaEGraficos() {\n  dadosAnalise.value = dadosAnalise.value.replace(/\\r?\\n|\\r/g, ' ').replace(/\\s{2,}/g, ' ');\n\n  const dataInput = dadosAnalise.value.trim();\n  if (!dataInput) return;\n\n  const liga = campeonatoSelecionado.value;\n  const minutos = gerarMinutosPorLiga(liga);\n  const mosaico = sanitizarDados(dataInput);\n  rankings.value = [\n  { title: \"Chama Gol\", data: calculateChamaGol(mosaico) },\n  { title: \"Máxima de Mercado\", data: calculateMaximaMercado(mosaico) },\n  { title: \"Âncora de Mercado\", data: calculateAncoraMercado(mosaico) },\n];\n  const resultadosMercados = {};\n  [...mercadosUnderOver, ...mercadosAmbas].forEach((mercado) => {\n    resultadosMercados[mercado] = verificarResultadosMercado(mosaico, mercado);\n  });\n\n  const oscilacoesPorMercado = calcularOscilacaoPorMercadoEspecifico(\n    resultadosMercados,\n    [\"over25\", \"ambas\"]\n  );\n\n  gerarTabela(minutos, mosaico, resultadosMercados, oscilacoesPorMercado);\n\n  // gerarTabela(minutos, mosaico, resultadosMercados);\n\n  const dadosOscilacao = calcularOscilacaoPorMercado(\n    mosaico,\n    resultadosMercados\n  );\n\n  const labelsHoraMaisMinuto = gerarLabelsHoraMaisMinuto(minutos, mosaico);\n\n  gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto);\n}\n\nfunction gerarMinutosPorLiga(liga) {\n  switch (liga) {\n    case \"copa\":\n    case \"super\":\n      return Array.from({ length: 20 }, (_, i) => 1 + i * 3);\n    case \"euro\":\n      return Array.from({ length: 20 }, (_, i) => 2 + i * 3);\n    case \"premier\":\n      return Array.from({ length: 20 }, (_, i) => i * 3);\n    default:\n      return [];\n  }\n}\n\nfunction sanitizarDados(data) {\n  return data.split(\"\\n\").map((row, rowIndex) => {\n    const columns = row.trim().split(/\\t+/); // Divide usando tabulação como separador principal\n    const hora = columns.shift(); // A primeira coluna é sempre a hora\n\n    if (!hora || isNaN(hora)) {\n      console.warn(`Hora inválida na linha ${rowIndex}: ${hora}`);\n    }\n\n    const jogosSanitizados = columns.map((jogo) => {\n      return jogo.replace(\"+\", \"\").trim(); // Remove qualquer \"+\" dos dados\n    });\n\n    return [hora, ...jogosSanitizados];\n  });\n}\n\n\nfunction verificarResultadosMercado(mosaico, mercado) {\n  return mosaico.map((row) => {\n    const hora = row[0]; // Mantemos a hora na primeira posição\n    const resultados = row.slice(1).map((jogo) => {\n      if (!jogo) return false;\n\n      // Extrai os números do placar corretamente\n      const placarMatch = jogo.match(/(\\d+)-(\\d+)$/);\n      if (!placarMatch) return false;\n\n      const time1 = parseInt(placarMatch[1], 10);\n      const time2 = parseInt(placarMatch[2], 10);\n\n      switch (mercado) {\n        case \"under25\":\n          return time1 + time2 < 2.5;\n        case \"over25\":\n          return time1 + time2 >= 2.5;\n        case \"ambas\":\n          return time1 > 0 && time2 > 0;\n        case \"ambasNao\":\n          return !(time1 > 0 && time2 > 0);\n        default:\n          return false;\n      }\n    });\n\n    return [hora, ...resultados];\n  });\n}\n\nfunction calcularOscilacaoPorMercadoEspecifico(resultadosMercados, mercadosAlvo) {\n  const oscilacoesMercado = {};\n\n  mercadosAlvo.forEach((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = resultadosMercados[mercado].length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1); // Ignorar a hora\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1); // Ignorar a hora\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0; // Sem mudança\n        } else {\n          acumulado += result ? 1 : -1; // Incremento ou decremento\n        }\n\n        if (!oscilacoes[rowIndex]) oscilacoes[rowIndex] = [];\n        oscilacoes[rowIndex][colIndex] = acumulado; // Armazena a oscilação\n      });\n    }\n\n    oscilacoesMercado[mercado] = oscilacoes;\n  });\n\n  return oscilacoesMercado;\n}\n\n\nfunction gerarContagensTabela(resultadosMercados, tabelas) {\n  tabelas.forEach((mercadoTabela) => {\n    const table = document.getElementById(mercadoTabela);\n    const linhas = table.querySelectorAll(\"tr\");\n\n    linhas.forEach((linha, rowIndex) => {\n      // Ignora o cabeçalho\n      if (rowIndex === 0) return;\n\n      // Obtém as células da linha atual\n      const cells = linha.querySelectorAll(\"td\");\n      const hora = cells[0].innerText;\n\n      let overCount = 0;\n      let subidaCount = 0;\n      let lateralOverCount = 0;\n      let descidaCount = 0;\n      let lateralUnderCount = 0;\n\n      // Faz as contagens com base nos resultadosMercados\n      for (let colIndex = 1; colIndex < cells.length - 5; colIndex++) {\n        const atualOver = resultadosMercados.over25[rowIndex - 1]?.[colIndex];\n        const anteriorOver = resultadosMercados.over25[rowIndex]?.[colIndex];\n        const atualAmbas = resultadosMercados.ambas[rowIndex - 1]?.[colIndex];\n        const anteriorAmbas = resultadosMercados.ambas[rowIndex]?.[colIndex];\n\n        // Porcentagem over\n        if (atualOver) overCount++;\n\n        // Subidas: Over25 em cima de Under25\n        if (atualOver && !anteriorOver) subidaCount++;\n\n        // Lateralizações Over25: Over25 em cima de Over25\n        if (atualOver && anteriorOver) lateralOverCount++;\n\n        // Descidas: Under25 em cima de Over25\n        if (!atualOver && anteriorOver) descidaCount++;\n\n        // Lateralizações Under25: Under25 em cima de Under25\n        if (!atualOver && !anteriorOver) lateralUnderCount++;\n      }\n\n      // Atualiza as células extras para contagens\n      const porcentagemCell = cells[cells.length - 5];\n      porcentagemCell.innerText = `${(\n        (overCount / (cells.length - 6)) *\n        100\n      ).toFixed(0)}%`;\n\n      const subidaCell = cells[cells.length - 4];\n      subidaCell.innerText = subidaCount;\n\n      const lateralOverCell = cells[cells.length - 3];\n      lateralOverCell.innerText = lateralOverCount;\n\n      const descidaCell = cells[cells.length - 2];\n      descidaCell.innerText = descidaCount;\n\n      const lateralUnderCell = cells[cells.length - 1];\n      lateralUnderCell.innerText = lateralUnderCount;\n    });\n  });\n}\n\nfunction calcularPorcentagemColunas(mosaico, mercado, resultadosMercados) {\n  const porcentagens = [];\n  const totalLinhas = mosaico.length - 1;\n\n  for (let colIndex = 1; colIndex <= 20; colIndex++) {\n    let count = 0;\n\n    for (let rowIndex = 1; rowIndex < mosaico.length; rowIndex++) {\n      if (\n        resultadosMercados[mercado] &&\n        resultadosMercados[mercado][rowIndex]\n      ) {\n        const result = resultadosMercados[mercado][rowIndex][colIndex];\n        if (result) {\n          count++;\n        }\n      }\n    }\n    const porcentagem =\n      totalLinhas > 0 ? ((count / totalLinhas) * 100).toFixed(0) : 0;\n    porcentagens.push(porcentagem);\n  }\n\n  return porcentagens;\n}\n\nfunction calcularPorcentagemPorBlocos(porcentagens) {\n  const blocos = [];\n  let soma = 0;\n\n  porcentagens.forEach((porcentagem, index) => {\n    soma += parseInt(porcentagem, 10); // Garante que seja tratado como número\n    if ((index + 1) % 5 === 0) {\n      // A cada 5 colunas, adiciona ao bloco\n      blocos.push(soma / 5); // Calcula a média\n      soma = 0; // Reseta a soma para o próximo bloco\n    }\n  });\n\n  return blocos;\n}\n\nfunction calcularMediaPorcetagensLinhas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = tabela.querySelectorAll(\"tr\");\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 1) {\n      const celulaPorcentagem = linha.querySelector(\"td:nth-last-child(6)\");\n      if (celulaPorcentagem) {\n        const valor = parseInt(\n          celulaPorcentagem.innerText.replace(\"%\", \"\").trim(),\n          10\n        );\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / contador).toFixed(2))}%` : 0;\n\n  const mediaColunaPorcentagens = document.getElementById(\n    `${tabelaId}mediaColunaPorcentagens`\n  );\n  mediaColunaPorcentagens.innerText = media;\n}\n\nfunction calcularMediaSubidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"subidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaSubidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacaoOver(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesOverCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesOver`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaDescidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"descidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaDescidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacoesUnder(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesUnderCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesUnder`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaGols(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByTagName(\"tr\")); // Pega todas as linhas da tabela\n  let soma = 0;\n  let contador = 0;\n\n  // Itera sobre as linhas, pulando o cabeçalho e a soma de gols\n  for (let i = 1; i < linhas.length - 1; i++) {\n    const celulaGols = linhas[i].querySelector(\".golsCell\"); // Pega a célula de gols da linha\n\n    if (celulaGols) {\n      const valor = parseInt(celulaGols.innerText.trim(), 10);\n\n      if (!isNaN(valor)) {\n        soma += valor;\n        contador++;\n      }\n    }\n  }\n\n  const media = contador > 0 ? `${Math.ceil(soma / contador)}` : 0;\n\n  const mediaColunaGols = document.getElementById(\n    `${tabelaId}mediaColunaGols`\n  );\n  mediaColunaGols.innerText = media;\n}\n\nfunction adicionarLinhaSomaGols(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  if (!mosaico || mosaico.length === 0) {\n    console.warn(\"O mosaico está vazio.\");\n    return;\n  }\n\n  const numColunas = mosaico[0].length - 1; // Número de colunas de resultados\n  const somaGolsPorColuna = Array(numColunas).fill(0);\n\n  mosaico.forEach((row, rowIndex) => {\n    if (rowIndex > 0) {\n      row.slice(1).forEach((cell, colIndex) => {\n        const placar = cell.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const golsTime1 = parseInt(placar[1]);\n          const golsTime2 = parseInt(placar[2]);\n          somaGolsPorColuna[colIndex] += golsTime1 + golsTime2;\n        }\n      });\n    }\n  });\n\n  const linhaSoma = document.createElement(\"tr\");\n  const headerCell = document.createElement(\"td\");\n  headerCell.innerText = \"⚽\";\n  linhaSoma.appendChild(headerCell);\n\n  somaGolsPorColuna.forEach((soma) => {\n    const cell = document.createElement(\"td\");\n    cell.innerText = soma || 0;\n    cell.classList.add(\"somaGolsCell\");\n    linhaSoma.appendChild(cell);\n  });\n\n  const colunasExtras = 6;\n  for (let i = 0; i < colunasExtras; i++) {\n    const emptyCell = document.createElement(\"td\");\n    linhaSoma.appendChild(emptyCell);\n  }\n\n  tabela.insertBefore(linhaSoma, tabela.querySelector(\"tr:nth-child(3)\"));\n}\nfunction adicionarLinhaOscilacaoColunas(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  // Cria uma nova linha para a oscilação\n  const LinhaOscilacaoColunasPorcentagem = document.createElement(\"tr\");\n  const LinhaOscilacaoColunasPorcentagemIcone = document.createElement(\"td\");\n  LinhaOscilacaoColunasPorcentagemIcone.innerHTML = \"📈\"; // Ícone de gráfico\n  LinhaOscilacaoColunasPorcentagem.appendChild(LinhaOscilacaoColunasPorcentagemIcone);\n\n  // Insere a linha logo abaixo da linha de porcentagens\n  const linhas = tabela.getElementsByTagName(\"tr\");\n  const porcentagens = Array.from(linhas[1].querySelectorAll(\"td\")).slice(1); // Obtém porcentagens da linha\n  const resultados = mosaico[0].slice(1); // Obtém os resultados da primeira linha do mosaico\n\n  let acumulado = 0; // Variável para acumular os valores de oscilação\n\n  porcentagens.forEach((porcentagemCelula, index) => {\n    const porcentagem = parseFloat(porcentagemCelula.innerText.replace(\"%\", \"\").trim()); // Obtém a porcentagem como número\n    const resultado = resultados[index]; // Resultado atual da coluna\n    const cell = document.createElement(\"td\"); // Nova célula para a linha de oscilação\n\n    if (resultado) {\n      const partes = resultado.split(\" \"); // Divide por espaço\n      const placar = partes[partes.length - 1]; // Obtém o último elemento (exemplo: \"2-1\")\n      const [golsTime1, golsTime2] = placar.split(\"-\").map(Number); // Converte em números\n\n      if (!isNaN(golsTime1) && !isNaN(golsTime2)) {\n        const totalGols = golsTime1 + golsTime2;\n        const isOver = totalGols > 2.5; // Verifica se o total de gols é maior que 2.5\n\n        if (isOver && porcentagem > 42) {\n          // Over com porcentagem Over -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem <= 42) {\n          // Under com porcentagem Under -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        } else if (isOver && porcentagem <= 42) {\n          // Over com porcentagem Under -> sobe\n          acumulado++; // Incrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem > 42) {\n          // Under com porcentagem Over -> desce\n          acumulado--; // Decrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        }\n      } else {\n        // Se houver erro na extração dos gols, mantemos o acumulado sem alteração\n        cell.innerText = acumulado;\n      }\n    } else {\n      // Caso não tenha resultado, mantém vazio\n      cell.innerText = \"\";\n    }\n\n    LinhaOscilacaoColunasPorcentagem.appendChild(cell);\n  });\n\n  tabela.insertBefore(\n    LinhaOscilacaoColunasPorcentagem,\n    tabela.querySelector(\"tr:nth-child(3)\")\n  );\n}\n\n\nfunction gerarTabela(\n  minutos,\n  mosaico,\n  resultadosMercados,\n  oscilacoesPorMercado\n) {\n  const tabelas = [\"tabelao25\", \"tabelaambas\"];\n\n  tabelas.forEach((mercadoTabela, tabelaIndex) => {\n    const mercado = tabelaIndex === 0 ? \"over25\" : \"ambas\";\n    const table = document.getElementById(mercadoTabela);\n    table.innerHTML = \"\";\n\n    const porcentagens = calcularPorcentagemColunas(\n      mosaico,\n      mercado,\n      resultadosMercados\n    );\n    const porcentagensBloco = calcularPorcentagemPorBlocos(porcentagens);\n\n    /* LINHA DE PORCENTAGEM DOS BLOCOS */\n    const porcentagemBloco = document.createElement(\"tr\");\n    const porcentagemCellBloco = document.createElement(\"td\");\n    porcentagemCellBloco.classList.add(\"percentCell\");\n    porcentagemCellBloco.innerText = \"%\";\n    porcentagemBloco.appendChild(porcentagemCellBloco);\n\n    for (let index = 0; index < porcentagensBloco.length; index++) {\n      const porcentagemCellsBloco = document.createElement(\"td\");\n      porcentagemCellsBloco.setAttribute(\"colspan\", \"5\");\n      porcentagemCellsBloco.innerText = `${porcentagensBloco[index]}%`;\n      porcentagemCellsBloco.classList.add(\"percentCell\");\n      porcentagemCellsBloco.classList.add(\n        porcentagensBloco[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemBloco.appendChild(porcentagemCellsBloco);\n    }\n\n    table.appendChild(porcentagemBloco);\n\n    /* LINHA DE PORCENTAGEM DASCOLUNAS */\n\n    const porcentagemRow = document.createElement(\"tr\");\n    const porcentagemCell = document.createElement(\"td\");\n    porcentagemCell.classList.add(\"percentCell\");\n    porcentagemCell.innerText = \"%\";\n    porcentagemRow.appendChild(porcentagemCell);\n\n    for (let index = 0; index < porcentagens.length; index++) {\n      const porcentagemCells = document.createElement(\"td\");\n      porcentagemCells.innerText = `${porcentagens[index]}%`;\n      porcentagemCells.classList.add(\"percentCell\");\n      porcentagemCells.classList.add(\n        porcentagens[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemRow.appendChild(porcentagemCells);\n    }\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaPorcentagens = document.createElement(\"td\");\n    mediaColunaPorcentagens.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaPorcentagens`\n    );\n    porcentagemRow.appendChild(mediaColunaPorcentagens);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaSubidas = document.createElement(\"td\");\n    mediaColunaSubidas.setAttribute(\"id\", `${mercadoTabela}mediaColunaSubidas`);\n    porcentagemRow.appendChild(mediaColunaSubidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesOver = document.createElement(\"td\");\n    mediaColunaLateralizacoesOver.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesOver`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesOver);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaDescidas = document.createElement(\"td\");\n    mediaColunaDescidas.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaDescidas`\n    );\n    porcentagemRow.appendChild(mediaColunaDescidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesUnder = document.createElement(\"td\");\n    mediaColunaLateralizacoesUnder.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesUnder`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesUnder);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaGols = document.createElement(\"td\");\n    mediaColunaGols.setAttribute(\"id\", `${mercadoTabela}mediaColunaGols`);\n    porcentagemRow.appendChild(mediaColunaGols);\n\n    table.appendChild(porcentagemRow);\n\n    const headerRow = document.createElement(\"tr\");\n    const headerCell = document.createElement(\"th\");\n    headerCell.innerText = \"Hora\";\n    headerRow.appendChild(headerCell);\n\n    minutos.forEach((minuto) => {\n      const th = document.createElement(\"th\");\n      th.innerText = `${minuto < 10 ? \"0\" + minuto : minuto}`;\n      headerRow.appendChild(th);\n    });\n\n    const icones = [\"％\", \"⬆️\", \"↔️\", \"⬇️\", \"⇆\", \"⚽\"];\n    icones.forEach((icone) => {\n      const th = document.createElement(\"th\");\n      th.innerText = icone;\n      headerRow.appendChild(th);\n    });\n\n    table.appendChild(headerRow);\n\n    // Linhas\n    mosaico.forEach((row, rowIndex) => {\n  const tableRow = document.createElement(\"tr\");\n  const hourCell = document.createElement(\"td\");\n  hourCell.innerText = row[0] < 10 ? `0${row[0]}` : row[0];\n  hourCell.classList.add(\"firstCollumn\");\n  tableRow.appendChild(hourCell);\n\n  let rodadaClasse = \"\"; // Classe que será aplicada à linha\n\n  // Adiciona células para os resultados\n  row.slice(1).forEach((value, colIndex) => {\n        const cell = document.createElement(\"td\");\n        cell.innerText = value || \"\";\n\n        // Cor para os mercados\n        const placar = value.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const time1 = parseInt(placar[1]);\n          const time2 = parseInt(placar[2]);\n          let rodadaClasse = \"\";\n          if (mercado === \"over25\") {\n            rodadaClasse = time1 + time2 > 2 ? \"green\" : \"red\";\n          } else if (mercado === \"ambas\") {\n            rodadaClasse = time1 > 0 && time2 > 0 ? \"green\" : \"red\";\n          }\n          if (rodadaClasse) {\n            cell.classList.add(rodadaClasse);\n          }\n        }\n\n        tableRow.appendChild(cell);\n      });\n\n  // Aplica a classe da rodada para toda a linha\n  if (rodadaClasse) {\n    tableRow.classList.add(rodadaClasse);\n  }\n\n  // Preenche células vazias se a linha não tiver o número total de minutos\n  const colunasRestantes = minutos.length - row.slice(1).length;\n  for (let i = 0; i < colunasRestantes; i++) {\n    const emptyCell = document.createElement(\"td\");\n    emptyCell.innerText = \"\";\n    tableRow.appendChild(emptyCell);\n  }\n\n  // Adiciona as colunas adicionais ao final da linha\n  const porcentagemMercadoCell = document.createElement(\"td\");\n  porcentagemMercadoCell.innerText = calcularPorcentagemLinha(\n    rowIndex,\n    resultadosMercados[mercado]\n  );\n  tableRow.appendChild(porcentagemMercadoCell);\n\n  const subidasCell = document.createElement(\"td\");\n  subidasCell.classList.add(\"subidasCell\");\n  subidasCell.innerText = calcularSubidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(subidasCell);\n\n  const lateralizacoesOverCell = document.createElement(\"td\");\n  lateralizacoesOverCell.classList.add(\"lateralizacoesOverCell\");\n  lateralizacoesOverCell.innerText = calcularLateralizacaoVerde(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesOverCell);\n\n  const descidasCell = document.createElement(\"td\");\n  descidasCell.classList.add(\"descidasCell\");\n  descidasCell.innerText = calcularDescidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(descidasCell);\n\n  const lateralizacoesUnderCell = document.createElement(\"td\");\n  lateralizacoesUnderCell.classList.add(\"lateralizacoesUnderCell\");\n  lateralizacoesUnderCell.innerText = calcularLateralizacaoVermelho(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesUnderCell);\n\n  const golsCell = document.createElement(\"td\");\n  golsCell.classList.add(\"golsCell\");\n  golsCell.innerText = calcularGolsLinha(row);\n  tableRow.appendChild(golsCell);\n\n  table.appendChild(tableRow);\n});\n\n\n    calcularMediaPorcetagensLinhas(mercadoTabela);\n    calcularMediaSubidas(mercadoTabela);\n    calcularMediaLateralizacaoOver(mercadoTabela);\n    calcularMediaDescidas(mercadoTabela);\n    calcularMediaLateralizacoesUnder(mercadoTabela);\n    calcularMediaGols(mercadoTabela);\n    adicionarLinhaSomaGols(mercadoTabela, mosaico);\n    adicionarLinhaOscilacaoColunas(mercadoTabela, mosaico);\n  });\n\n  ativarDestaquePontos();\n}\n\n// Funções auxiliares\nfunction calcularPorcentagemLinha(rowIndex, resultadosMercado) {\n  const total = resultadosMercado[rowIndex].slice(1).length;\n  const ocorrencias = resultadosMercado[rowIndex]\n    .slice(1)\n    .filter(Boolean).length;\n  return `${Math.round((ocorrencias / total) * 100)}%`;\n}\n\nfunction calcularSubidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    false\n  );\n}\n\nfunction calcularDescidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVerde(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVermelho(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    false\n  );\n}\n\n// function calcularLateralizacoesLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado) {\n//     return calcularMovimentosLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado, mercadoComparado);\n// }\n\n\nfunction calcularGolsLinha(row) {\n  return row.slice(1).reduce((total, value) => {\n    // Extrai os placares usando uma expressão regular\n    const placares = value.match(/(\\d+)-(\\d+)/);\n    if (placares) {\n      const golsTime1 = parseInt(placares[1]);\n      const golsTime2 = parseInt(placares[2]);\n      return total + golsTime1 + golsTime2;\n    } else {\n      return total; // Retorna o total inalterado se não houver placares correspondentes\n    }\n  }, 0);\n}\n\n\n\n\nfunction calcularMovimentosLinha(\n  rowIndex,\n  resultadosMercados,\n  mercado,\n  condicao1,\n  condicao2\n) {\n  let contador = 0;\n  const currentRow = resultadosMercados[mercado][rowIndex];\n  const nextRow = resultadosMercados[mercado][rowIndex + 1];\n\n  if (!nextRow) return contador;\n\n  currentRow.slice(1).forEach((result, colIndex) => {\n    const nextResult = nextRow[colIndex + 1];\n    if (result === condicao1 && nextResult === condicao2) {\n      contador++;\n    }\n  });\n\n  return contador;\n}\n\nfunction gerarDadosContagem(resultados) {\n  console.log(resultados);\n}\n\nfunction calcularOscilacaoPorMercado(mosaico, resultadosMercados) {\n  return [...mercadosUnderOver, ...mercadosAmbas].map((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1);\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1);\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0;\n        } else {\n          acumulado += result ? 1 : -1;\n        }\n        oscilacoes.push(acumulado);\n      });\n    }\n\n    return {\n      mercado,\n      oscilacoes,\n    };\n  });\n}\n\nfunction gerarLabelsHoraMaisMinuto(minutos, mosaico) {\n  const labels = [];\n\n  for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n    const currentRow = mosaico[rowIndex].slice(1);\n    const hora = mosaico[rowIndex][0];\n\n    for (let label = 0; label < currentRow.length; label++) {\n      labels.push(\n        `${hora < 10 ? \"0\" + hora : hora}:${\n          minutos[label] < 10 ? \"0\" + minutos[label] : minutos[label]\n        }`\n      );\n    }\n  }\n\n  return labels;\n}\n\nfunction ativarDestaquePontos() {\n  const cellsWithPoints = document.querySelectorAll(\"td span.pontosGraficos\");\n\n  cellsWithPoints.forEach((span) => {\n    span.addEventListener(\"click\", function () {\n      const ponto = this.innerText; // Ponto do span clicado\n      const isHighlighted = this.parentElement.classList.contains(\"highlight\"); // Verifica se já está destacado\n\n      if (isHighlighted) {\n        // Remove o destaque de todas as células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.remove(\"highlight\");\n          }\n        });\n      } else {\n        // Remove os destaques globais\n        document.querySelectorAll(\".highlight\").forEach((el) => {\n          el.classList.remove(\"highlight\");\n        });\n\n        // Adiciona o destaque nas células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.add(\"highlight\");\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto) {\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosUnderOver,\n    \"graficoUnderOver\",\n    \"controlesUnderOver\",\n    labelsHoraMaisMinuto\n  );\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosAmbas,\n    \"graficoAmbas\",\n    \"controlesAmbas\",\n    labelsHoraMaisMinuto\n  );\n}\n\nfunction geraGraficosPorCategoria(\n  dadosOscilacao,\n  mercadosIniciais,\n  canvasId,\n  controlesId,\n  labels\n) {\n  const ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n  if (canvasId === \"graficoUnderOver\" && chartUnderOver) {\n    chartUnderOver.destroy();\n    chartUnderOver = null;\n  } else if (canvasId === \"graficoAmbas\" && chartAmbas) {\n    chartAmbas.destroy();\n    chartAmbas = null;\n  }\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosIniciais.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 3.5,\n      pointHoverRadius: 4,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  const data = {\n    labels,\n    datasets,\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return ` ${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"HorÃ¡rio\",\n        },\n        ticks: {\n          maxRotation: 0,\n          autoSkip: true,\n          stepSize: 5,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Valores Acumulados\",\n        },\n      },\n    },\n  };\n\n  const chart = new Chart(ctx, {\n    type: \"line\",\n    data: data,\n    options: options,\n  });\n\n  if (canvasId === \"graficoUnderOver\") {\n    chartUnderOver = chart;\n  } else if (canvasId === \"graficoAmbas\") {\n    chartAmbas = chart;\n  }\n\n  configurarControleDeMercados(\n    dadosOscilacao,\n    mercadosIniciais,\n    chart,\n    controlesId\n  );\n}\n\nfunction configurarControleDeMercados(\n  dadosOscilacao,\n  mercadosIniciais,\n  chart,\n  controlesId\n) {\n  const controlesContainer = document.getElementById(controlesId);\n  controlesContainer.innerHTML = \"\";\n\n  dadosOscilacao.forEach((dados) => {\n    const mercado = dados.mercado;\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = `mercado-${mercado}-${controlesId}`;\n    checkbox.checked = mercadosIniciais.includes(mercado);\n\n    const label = document.createElement(\"label\");\n    label.htmlFor = `mercado-${mercado}-${controlesId}`;\n    label.textContent = mercado.toUpperCase();\n\n    checkbox.addEventListener(\"change\", () => {\n      atualizarGrafico(dadosOscilacao, chart, controlesId);\n    });\n\n    const container = document.createElement(\"div\");\n    container.style.marginRight = \"10px\";\n    container.style.display = \"inline-block\";\n    container.appendChild(checkbox);\n    container.appendChild(label);\n    controlesContainer.appendChild(container);\n  });\n}\n\nfunction atualizarGrafico(dadosOscilacao, chart, controlesId) {\n  const mercadosSelecionados = Array.from(\n    document.querySelectorAll(`#${controlesId} input:checked`)\n  ).map((input) =>\n    input.id.replace(`mercado-`, \"\").replace(`-${controlesId}`, \"\")\n  );\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosSelecionados.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  chart.data.datasets = datasets;\n  chart.update();\n}\n\n\n</script>\n",
      "start": 1742846401053,
      "end": 1742846401216,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1742846401216,
      "end": 1742846401216,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1742846401216,
      "end": 1742846401216,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1742846401216,
      "end": 1742846401216,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1742846401216,
      "end": 1742846401216,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1742846401216,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-auto h-auto\" }\nconst _hoisted_2 = { class: \"max-w-2xl mx-auto mb-5\" }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", { class: \"text-2xl font-bold text-center mb-4 text-blue-500\" }, \" Ferramenta BBTips \", -1)\nconst _hoisted_4 = { class: \"mb-4\" }\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"block text-gray-700 font-medium mb-2\" }, \"Dados para Análise\", -1)\nconst _hoisted_6 = { class: \"flex gap-4\" }\nconst _hoisted_7 = { class: \"w-1/2\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-5\"\n}\nconst _hoisted_9 = { class: \"text-lg font-semibold text-gray-700 text-center mb-4\" }\nconst _hoisted_10 = { class: \"w-full border-collapse border border-gray-300\" }\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"thead\", null, [\n  /*#__PURE__*/_createElementVNode(\"tr\", { class: \"bg-gray-100\" }, [\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"#\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Time\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Valor\")\n  ])\n], -1)\nconst _hoisted_12 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_13 = { class: \"border border-gray-300 px-2 py-2\" }\nconst _hoisted_14 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_15 = { id: \"graficos\" }\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesUnderOver\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoUnderOver\" }, null, -1)\nconst _hoisted_18 = { class: \"table\" }\nconst _hoisted_19 = { id: \"tabelao25\" }\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesAmbas\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoAmbas\" }, null, -1)\nconst _hoisted_22 = { class: \"table\" }\nconst _hoisted_23 = { id: \"tabelaambas\" }\n\nimport { ref } from \"vue\";\nimport { Chart } from \"chart.js\";\n\nconst _sfc_main = {\n  __name: 'home',\n  setup(__props) {\n\nconst dadosAnalise = ref(\"\");\nconst showRanks = ref(false);\nconst campeonatoSelecionado = ref(null);\nconst showTable1 = ref(true);\nconst showTable2 = ref(true);\nconst rankings = ref([]);\nconst campeonatos = ref([\n  { label: \"Copa\", value: \"copa\" },\n  { label: \"Euro\", value: \"euro\" },\n  { label: \"Super\", value: \"super\" },\n  { label: \"Premier\", value: \"premier\" },\n]);\n\nfunction extrairGols(partida) {\n  const placar = partida.match(/(\\d+)-(\\d+)/);\n  if (placar) {\n    return parseInt(placar[1]) + parseInt(placar[2]);\n  }\n  return 0;\n}\nconst calculateChamaGol = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const golsPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!golsPorTime[partida.team]) {\n        golsPorTime[partida.team] = [];\n      }\n      golsPorTime[partida.team].push(partida.goals);\n    });\n  });\n\n  const medias = Object.entries(golsPorTime).map(([time, gols]) => {\n    const soma = gols.reduce((acc, gol) => acc + gol, 0);\n    return { team: time, value: (soma / gols.length).toFixed(2) };\n  });\n\n  return medias.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\nconst calculateMaximaMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0] };\n    })\n  );\n\n  const medias = resultados.flat().map((partida) => {\n    const streak = Math.floor(Math.random() * 6);\n    const avg = (streak + Math.random() * 5).toFixed(2);\n    return { team: partida.team, value: `${streak} / ${avg}` };\n  });\n\n  return medias\n    .sort((a, b) => b.value.split(\" / \")[1] - a.value.split(\" / \")[1])\n    .slice(0, 5);\n};\n\nconst calculateAncoraMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const pontosPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!pontosPorTime[partida.team]) {\n        pontosPorTime[partida.team] = 0;\n      }\n      pontosPorTime[partida.team] += partida.goals >= 5 ? 1 : 0;\n    });\n  });\n\n  const pontos = Object.entries(pontosPorTime).map(([time, pontos]) => ({\n    team: time,\n    value: pontos,\n  }));\n\n  return pontos.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\ndefinePageMeta({\n  layout: \"home\",\n  middleware: [],\n});\n\nconst handleFileUpload = (event) => {\n  console.log(\"Arquivo selecionado:\", event.files);\n};\n\n// Função dos graficos\n\nconst onClickAnalisar = () => {\n  const resultadoAnalise = document.getElementById(\"graficos\");\n  showRanks.value = true;\n  if (!resultadoAnalise) {\n    console.error(\"Elemento #graficos não encontrado.\");\n    return;\n  }\n\n  resultadoAnalise.style.display = \"block\";\n  gerarTabelaEGraficos();\n};\n\nlet chartUnderOver = null;\nlet chartAmbas = null;\n\n\n// for (let index = 0; index < tables.length; index++) {\n//   buttons[index].addEventListener(\"click\", () => {\n//     mostrarEsconderTabela(tables[index]);\n//   });\n// }\n\nconst mercadosUnderOver = [\"under25\", \"over25\"];\nconst mercadosAmbas = [\"ambasNao\", \"ambas\"];\n\nconst todasCores = {\n  under25: \"#f53246\",\n  over25: \"#6bf58b\",\n  ambas: \"#6bf58b\",\n  ambasNao: \"#f53246\",\n};\n\nfunction gerarTabelaEGraficos() {\n  dadosAnalise.value = dadosAnalise.value.replace(/\\r?\\n|\\r/g, ' ').replace(/\\s{2,}/g, ' ');\n\n  const dataInput = dadosAnalise.value.trim();\n  if (!dataInput) return;\n\n  const liga = campeonatoSelecionado.value;\n  const minutos = gerarMinutosPorLiga(liga);\n  const mosaico = sanitizarDados(dataInput);\n  rankings.value = [\n  { title: \"Chama Gol\", data: calculateChamaGol(mosaico) },\n  { title: \"Máxima de Mercado\", data: calculateMaximaMercado(mosaico) },\n  { title: \"Âncora de Mercado\", data: calculateAncoraMercado(mosaico) },\n];\n  const resultadosMercados = {};\n  [...mercadosUnderOver, ...mercadosAmbas].forEach((mercado) => {\n    resultadosMercados[mercado] = verificarResultadosMercado(mosaico, mercado);\n  });\n\n  const oscilacoesPorMercado = calcularOscilacaoPorMercadoEspecifico(\n    resultadosMercados,\n    [\"over25\", \"ambas\"]\n  );\n\n  gerarTabela(minutos, mosaico, resultadosMercados, oscilacoesPorMercado);\n\n  // gerarTabela(minutos, mosaico, resultadosMercados);\n\n  const dadosOscilacao = calcularOscilacaoPorMercado(\n    mosaico,\n    resultadosMercados\n  );\n\n  const labelsHoraMaisMinuto = gerarLabelsHoraMaisMinuto(minutos, mosaico);\n\n  gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto);\n}\n\nfunction gerarMinutosPorLiga(liga) {\n  switch (liga) {\n    case \"copa\":\n    case \"super\":\n      return Array.from({ length: 20 }, (_, i) => 1 + i * 3);\n    case \"euro\":\n      return Array.from({ length: 20 }, (_, i) => 2 + i * 3);\n    case \"premier\":\n      return Array.from({ length: 20 }, (_, i) => i * 3);\n    default:\n      return [];\n  }\n}\n\nfunction sanitizarDados(data) {\n  return data.split(\"\\n\").map((row, rowIndex) => {\n    const columns = row.trim().split(/\\t+/); // Divide usando tabulação como separador principal\n    const hora = columns.shift(); // A primeira coluna é sempre a hora\n\n    if (!hora || isNaN(hora)) {\n      console.warn(`Hora inválida na linha ${rowIndex}: ${hora}`);\n    }\n\n    const jogosSanitizados = columns.map((jogo) => {\n      return jogo.replace(\"+\", \"\").trim(); // Remove qualquer \"+\" dos dados\n    });\n\n    return [hora, ...jogosSanitizados];\n  });\n}\n\n\nfunction verificarResultadosMercado(mosaico, mercado) {\n  return mosaico.map((row) => {\n    const hora = row[0]; // Mantemos a hora na primeira posição\n    const resultados = row.slice(1).map((jogo) => {\n      if (!jogo) return false;\n\n      // Extrai os números do placar corretamente\n      const placarMatch = jogo.match(/(\\d+)-(\\d+)$/);\n      if (!placarMatch) return false;\n\n      const time1 = parseInt(placarMatch[1], 10);\n      const time2 = parseInt(placarMatch[2], 10);\n\n      switch (mercado) {\n        case \"under25\":\n          return time1 + time2 < 2.5;\n        case \"over25\":\n          return time1 + time2 >= 2.5;\n        case \"ambas\":\n          return time1 > 0 && time2 > 0;\n        case \"ambasNao\":\n          return !(time1 > 0 && time2 > 0);\n        default:\n          return false;\n      }\n    });\n\n    return [hora, ...resultados];\n  });\n}\n\nfunction calcularOscilacaoPorMercadoEspecifico(resultadosMercados, mercadosAlvo) {\n  const oscilacoesMercado = {};\n\n  mercadosAlvo.forEach((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = resultadosMercados[mercado].length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1); // Ignorar a hora\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1); // Ignorar a hora\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0; // Sem mudança\n        } else {\n          acumulado += result ? 1 : -1; // Incremento ou decremento\n        }\n\n        if (!oscilacoes[rowIndex]) oscilacoes[rowIndex] = [];\n        oscilacoes[rowIndex][colIndex] = acumulado; // Armazena a oscilação\n      });\n    }\n\n    oscilacoesMercado[mercado] = oscilacoes;\n  });\n\n  return oscilacoesMercado;\n}\n\n\nfunction gerarContagensTabela(resultadosMercados, tabelas) {\n  tabelas.forEach((mercadoTabela) => {\n    const table = document.getElementById(mercadoTabela);\n    const linhas = table.querySelectorAll(\"tr\");\n\n    linhas.forEach((linha, rowIndex) => {\n      // Ignora o cabeçalho\n      if (rowIndex === 0) return;\n\n      // Obtém as células da linha atual\n      const cells = linha.querySelectorAll(\"td\");\n      const hora = cells[0].innerText;\n\n      let overCount = 0;\n      let subidaCount = 0;\n      let lateralOverCount = 0;\n      let descidaCount = 0;\n      let lateralUnderCount = 0;\n\n      // Faz as contagens com base nos resultadosMercados\n      for (let colIndex = 1; colIndex < cells.length - 5; colIndex++) {\n        const atualOver = resultadosMercados.over25[rowIndex - 1]?.[colIndex];\n        const anteriorOver = resultadosMercados.over25[rowIndex]?.[colIndex];\n        const atualAmbas = resultadosMercados.ambas[rowIndex - 1]?.[colIndex];\n        const anteriorAmbas = resultadosMercados.ambas[rowIndex]?.[colIndex];\n\n        // Porcentagem over\n        if (atualOver) overCount++;\n\n        // Subidas: Over25 em cima de Under25\n        if (atualOver && !anteriorOver) subidaCount++;\n\n        // Lateralizações Over25: Over25 em cima de Over25\n        if (atualOver && anteriorOver) lateralOverCount++;\n\n        // Descidas: Under25 em cima de Over25\n        if (!atualOver && anteriorOver) descidaCount++;\n\n        // Lateralizações Under25: Under25 em cima de Under25\n        if (!atualOver && !anteriorOver) lateralUnderCount++;\n      }\n\n      // Atualiza as células extras para contagens\n      const porcentagemCell = cells[cells.length - 5];\n      porcentagemCell.innerText = `${(\n        (overCount / (cells.length - 6)) *\n        100\n      ).toFixed(0)}%`;\n\n      const subidaCell = cells[cells.length - 4];\n      subidaCell.innerText = subidaCount;\n\n      const lateralOverCell = cells[cells.length - 3];\n      lateralOverCell.innerText = lateralOverCount;\n\n      const descidaCell = cells[cells.length - 2];\n      descidaCell.innerText = descidaCount;\n\n      const lateralUnderCell = cells[cells.length - 1];\n      lateralUnderCell.innerText = lateralUnderCount;\n    });\n  });\n}\n\nfunction calcularPorcentagemColunas(mosaico, mercado, resultadosMercados) {\n  const porcentagens = [];\n  const totalLinhas = mosaico.length - 1;\n\n  for (let colIndex = 1; colIndex <= 20; colIndex++) {\n    let count = 0;\n\n    for (let rowIndex = 1; rowIndex < mosaico.length; rowIndex++) {\n      if (\n        resultadosMercados[mercado] &&\n        resultadosMercados[mercado][rowIndex]\n      ) {\n        const result = resultadosMercados[mercado][rowIndex][colIndex];\n        if (result) {\n          count++;\n        }\n      }\n    }\n    const porcentagem =\n      totalLinhas > 0 ? ((count / totalLinhas) * 100).toFixed(0) : 0;\n    porcentagens.push(porcentagem);\n  }\n\n  return porcentagens;\n}\n\nfunction calcularPorcentagemPorBlocos(porcentagens) {\n  const blocos = [];\n  let soma = 0;\n\n  porcentagens.forEach((porcentagem, index) => {\n    soma += parseInt(porcentagem, 10); // Garante que seja tratado como número\n    if ((index + 1) % 5 === 0) {\n      // A cada 5 colunas, adiciona ao bloco\n      blocos.push(soma / 5); // Calcula a média\n      soma = 0; // Reseta a soma para o próximo bloco\n    }\n  });\n\n  return blocos;\n}\n\nfunction calcularMediaPorcetagensLinhas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = tabela.querySelectorAll(\"tr\");\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 1) {\n      const celulaPorcentagem = linha.querySelector(\"td:nth-last-child(6)\");\n      if (celulaPorcentagem) {\n        const valor = parseInt(\n          celulaPorcentagem.innerText.replace(\"%\", \"\").trim(),\n          10\n        );\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / contador).toFixed(2))}%` : 0;\n\n  const mediaColunaPorcentagens = document.getElementById(\n    `${tabelaId}mediaColunaPorcentagens`\n  );\n  mediaColunaPorcentagens.innerText = media;\n}\n\nfunction calcularMediaSubidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"subidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaSubidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacaoOver(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesOverCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesOver`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaDescidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"descidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaDescidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacoesUnder(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesUnderCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesUnder`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaGols(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByTagName(\"tr\")); // Pega todas as linhas da tabela\n  let soma = 0;\n  let contador = 0;\n\n  // Itera sobre as linhas, pulando o cabeçalho e a soma de gols\n  for (let i = 1; i < linhas.length - 1; i++) {\n    const celulaGols = linhas[i].querySelector(\".golsCell\"); // Pega a célula de gols da linha\n\n    if (celulaGols) {\n      const valor = parseInt(celulaGols.innerText.trim(), 10);\n\n      if (!isNaN(valor)) {\n        soma += valor;\n        contador++;\n      }\n    }\n  }\n\n  const media = contador > 0 ? `${Math.ceil(soma / contador)}` : 0;\n\n  const mediaColunaGols = document.getElementById(\n    `${tabelaId}mediaColunaGols`\n  );\n  mediaColunaGols.innerText = media;\n}\n\nfunction adicionarLinhaSomaGols(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  if (!mosaico || mosaico.length === 0) {\n    console.warn(\"O mosaico está vazio.\");\n    return;\n  }\n\n  const numColunas = mosaico[0].length - 1; // Número de colunas de resultados\n  const somaGolsPorColuna = Array(numColunas).fill(0);\n\n  mosaico.forEach((row, rowIndex) => {\n    if (rowIndex > 0) {\n      row.slice(1).forEach((cell, colIndex) => {\n        const placar = cell.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const golsTime1 = parseInt(placar[1]);\n          const golsTime2 = parseInt(placar[2]);\n          somaGolsPorColuna[colIndex] += golsTime1 + golsTime2;\n        }\n      });\n    }\n  });\n\n  const linhaSoma = document.createElement(\"tr\");\n  const headerCell = document.createElement(\"td\");\n  headerCell.innerText = \"⚽\";\n  linhaSoma.appendChild(headerCell);\n\n  somaGolsPorColuna.forEach((soma) => {\n    const cell = document.createElement(\"td\");\n    cell.innerText = soma || 0;\n    cell.classList.add(\"somaGolsCell\");\n    linhaSoma.appendChild(cell);\n  });\n\n  const colunasExtras = 6;\n  for (let i = 0; i < colunasExtras; i++) {\n    const emptyCell = document.createElement(\"td\");\n    linhaSoma.appendChild(emptyCell);\n  }\n\n  tabela.insertBefore(linhaSoma, tabela.querySelector(\"tr:nth-child(3)\"));\n}\nfunction adicionarLinhaOscilacaoColunas(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  // Cria uma nova linha para a oscilação\n  const LinhaOscilacaoColunasPorcentagem = document.createElement(\"tr\");\n  const LinhaOscilacaoColunasPorcentagemIcone = document.createElement(\"td\");\n  LinhaOscilacaoColunasPorcentagemIcone.innerHTML = \"📈\"; // Ícone de gráfico\n  LinhaOscilacaoColunasPorcentagem.appendChild(LinhaOscilacaoColunasPorcentagemIcone);\n\n  // Insere a linha logo abaixo da linha de porcentagens\n  const linhas = tabela.getElementsByTagName(\"tr\");\n  const porcentagens = Array.from(linhas[1].querySelectorAll(\"td\")).slice(1); // Obtém porcentagens da linha\n  const resultados = mosaico[0].slice(1); // Obtém os resultados da primeira linha do mosaico\n\n  let acumulado = 0; // Variável para acumular os valores de oscilação\n\n  porcentagens.forEach((porcentagemCelula, index) => {\n    const porcentagem = parseFloat(porcentagemCelula.innerText.replace(\"%\", \"\").trim()); // Obtém a porcentagem como número\n    const resultado = resultados[index]; // Resultado atual da coluna\n    const cell = document.createElement(\"td\"); // Nova célula para a linha de oscilação\n\n    if (resultado) {\n      const partes = resultado.split(\" \"); // Divide por espaço\n      const placar = partes[partes.length - 1]; // Obtém o último elemento (exemplo: \"2-1\")\n      const [golsTime1, golsTime2] = placar.split(\"-\").map(Number); // Converte em números\n\n      if (!isNaN(golsTime1) && !isNaN(golsTime2)) {\n        const totalGols = golsTime1 + golsTime2;\n        const isOver = totalGols > 2.5; // Verifica se o total de gols é maior que 2.5\n\n        if (isOver && porcentagem > 42) {\n          // Over com porcentagem Over -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem <= 42) {\n          // Under com porcentagem Under -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        } else if (isOver && porcentagem <= 42) {\n          // Over com porcentagem Under -> sobe\n          acumulado++; // Incrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem > 42) {\n          // Under com porcentagem Over -> desce\n          acumulado--; // Decrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        }\n      } else {\n        // Se houver erro na extração dos gols, mantemos o acumulado sem alteração\n        cell.innerText = acumulado;\n      }\n    } else {\n      // Caso não tenha resultado, mantém vazio\n      cell.innerText = \"\";\n    }\n\n    LinhaOscilacaoColunasPorcentagem.appendChild(cell);\n  });\n\n  tabela.insertBefore(\n    LinhaOscilacaoColunasPorcentagem,\n    tabela.querySelector(\"tr:nth-child(3)\")\n  );\n}\n\n\nfunction gerarTabela(\n  minutos,\n  mosaico,\n  resultadosMercados,\n  oscilacoesPorMercado\n) {\n  const tabelas = [\"tabelao25\", \"tabelaambas\"];\n\n  tabelas.forEach((mercadoTabela, tabelaIndex) => {\n    const mercado = tabelaIndex === 0 ? \"over25\" : \"ambas\";\n    const table = document.getElementById(mercadoTabela);\n    table.innerHTML = \"\";\n\n    const porcentagens = calcularPorcentagemColunas(\n      mosaico,\n      mercado,\n      resultadosMercados\n    );\n    const porcentagensBloco = calcularPorcentagemPorBlocos(porcentagens);\n\n    /* LINHA DE PORCENTAGEM DOS BLOCOS */\n    const porcentagemBloco = document.createElement(\"tr\");\n    const porcentagemCellBloco = document.createElement(\"td\");\n    porcentagemCellBloco.classList.add(\"percentCell\");\n    porcentagemCellBloco.innerText = \"%\";\n    porcentagemBloco.appendChild(porcentagemCellBloco);\n\n    for (let index = 0; index < porcentagensBloco.length; index++) {\n      const porcentagemCellsBloco = document.createElement(\"td\");\n      porcentagemCellsBloco.setAttribute(\"colspan\", \"5\");\n      porcentagemCellsBloco.innerText = `${porcentagensBloco[index]}%`;\n      porcentagemCellsBloco.classList.add(\"percentCell\");\n      porcentagemCellsBloco.classList.add(\n        porcentagensBloco[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemBloco.appendChild(porcentagemCellsBloco);\n    }\n\n    table.appendChild(porcentagemBloco);\n\n    /* LINHA DE PORCENTAGEM DASCOLUNAS */\n\n    const porcentagemRow = document.createElement(\"tr\");\n    const porcentagemCell = document.createElement(\"td\");\n    porcentagemCell.classList.add(\"percentCell\");\n    porcentagemCell.innerText = \"%\";\n    porcentagemRow.appendChild(porcentagemCell);\n\n    for (let index = 0; index < porcentagens.length; index++) {\n      const porcentagemCells = document.createElement(\"td\");\n      porcentagemCells.innerText = `${porcentagens[index]}%`;\n      porcentagemCells.classList.add(\"percentCell\");\n      porcentagemCells.classList.add(\n        porcentagens[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemRow.appendChild(porcentagemCells);\n    }\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaPorcentagens = document.createElement(\"td\");\n    mediaColunaPorcentagens.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaPorcentagens`\n    );\n    porcentagemRow.appendChild(mediaColunaPorcentagens);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaSubidas = document.createElement(\"td\");\n    mediaColunaSubidas.setAttribute(\"id\", `${mercadoTabela}mediaColunaSubidas`);\n    porcentagemRow.appendChild(mediaColunaSubidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesOver = document.createElement(\"td\");\n    mediaColunaLateralizacoesOver.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesOver`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesOver);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaDescidas = document.createElement(\"td\");\n    mediaColunaDescidas.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaDescidas`\n    );\n    porcentagemRow.appendChild(mediaColunaDescidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesUnder = document.createElement(\"td\");\n    mediaColunaLateralizacoesUnder.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesUnder`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesUnder);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaGols = document.createElement(\"td\");\n    mediaColunaGols.setAttribute(\"id\", `${mercadoTabela}mediaColunaGols`);\n    porcentagemRow.appendChild(mediaColunaGols);\n\n    table.appendChild(porcentagemRow);\n\n    const headerRow = document.createElement(\"tr\");\n    const headerCell = document.createElement(\"th\");\n    headerCell.innerText = \"Hora\";\n    headerRow.appendChild(headerCell);\n\n    minutos.forEach((minuto) => {\n      const th = document.createElement(\"th\");\n      th.innerText = `${minuto < 10 ? \"0\" + minuto : minuto}`;\n      headerRow.appendChild(th);\n    });\n\n    const icones = [\"％\", \"⬆️\", \"↔️\", \"⬇️\", \"⇆\", \"⚽\"];\n    icones.forEach((icone) => {\n      const th = document.createElement(\"th\");\n      th.innerText = icone;\n      headerRow.appendChild(th);\n    });\n\n    table.appendChild(headerRow);\n\n    // Linhas\n    mosaico.forEach((row, rowIndex) => {\n  const tableRow = document.createElement(\"tr\");\n  const hourCell = document.createElement(\"td\");\n  hourCell.innerText = row[0] < 10 ? `0${row[0]}` : row[0];\n  hourCell.classList.add(\"firstCollumn\");\n  tableRow.appendChild(hourCell);\n\n  let rodadaClasse = \"\"; // Classe que será aplicada à linha\n\n  // Adiciona células para os resultados\n  row.slice(1).forEach((value, colIndex) => {\n        const cell = document.createElement(\"td\");\n        cell.innerText = value || \"\";\n\n        // Cor para os mercados\n        const placar = value.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const time1 = parseInt(placar[1]);\n          const time2 = parseInt(placar[2]);\n          let rodadaClasse = \"\";\n          if (mercado === \"over25\") {\n            rodadaClasse = time1 + time2 > 2 ? \"green\" : \"red\";\n          } else if (mercado === \"ambas\") {\n            rodadaClasse = time1 > 0 && time2 > 0 ? \"green\" : \"red\";\n          }\n          if (rodadaClasse) {\n            cell.classList.add(rodadaClasse);\n          }\n        }\n\n        tableRow.appendChild(cell);\n      });\n\n  // Aplica a classe da rodada para toda a linha\n  if (rodadaClasse) {\n    tableRow.classList.add(rodadaClasse);\n  }\n\n  // Preenche células vazias se a linha não tiver o número total de minutos\n  const colunasRestantes = minutos.length - row.slice(1).length;\n  for (let i = 0; i < colunasRestantes; i++) {\n    const emptyCell = document.createElement(\"td\");\n    emptyCell.innerText = \"\";\n    tableRow.appendChild(emptyCell);\n  }\n\n  // Adiciona as colunas adicionais ao final da linha\n  const porcentagemMercadoCell = document.createElement(\"td\");\n  porcentagemMercadoCell.innerText = calcularPorcentagemLinha(\n    rowIndex,\n    resultadosMercados[mercado]\n  );\n  tableRow.appendChild(porcentagemMercadoCell);\n\n  const subidasCell = document.createElement(\"td\");\n  subidasCell.classList.add(\"subidasCell\");\n  subidasCell.innerText = calcularSubidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(subidasCell);\n\n  const lateralizacoesOverCell = document.createElement(\"td\");\n  lateralizacoesOverCell.classList.add(\"lateralizacoesOverCell\");\n  lateralizacoesOverCell.innerText = calcularLateralizacaoVerde(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesOverCell);\n\n  const descidasCell = document.createElement(\"td\");\n  descidasCell.classList.add(\"descidasCell\");\n  descidasCell.innerText = calcularDescidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(descidasCell);\n\n  const lateralizacoesUnderCell = document.createElement(\"td\");\n  lateralizacoesUnderCell.classList.add(\"lateralizacoesUnderCell\");\n  lateralizacoesUnderCell.innerText = calcularLateralizacaoVermelho(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesUnderCell);\n\n  const golsCell = document.createElement(\"td\");\n  golsCell.classList.add(\"golsCell\");\n  golsCell.innerText = calcularGolsLinha(row);\n  tableRow.appendChild(golsCell);\n\n  table.appendChild(tableRow);\n});\n\n\n    calcularMediaPorcetagensLinhas(mercadoTabela);\n    calcularMediaSubidas(mercadoTabela);\n    calcularMediaLateralizacaoOver(mercadoTabela);\n    calcularMediaDescidas(mercadoTabela);\n    calcularMediaLateralizacoesUnder(mercadoTabela);\n    calcularMediaGols(mercadoTabela);\n    adicionarLinhaSomaGols(mercadoTabela, mosaico);\n    adicionarLinhaOscilacaoColunas(mercadoTabela, mosaico);\n  });\n\n  ativarDestaquePontos();\n}\n\n// Funções auxiliares\nfunction calcularPorcentagemLinha(rowIndex, resultadosMercado) {\n  const total = resultadosMercado[rowIndex].slice(1).length;\n  const ocorrencias = resultadosMercado[rowIndex]\n    .slice(1)\n    .filter(Boolean).length;\n  return `${Math.round((ocorrencias / total) * 100)}%`;\n}\n\nfunction calcularSubidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    false\n  );\n}\n\nfunction calcularDescidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVerde(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVermelho(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    false\n  );\n}\n\n// function calcularLateralizacoesLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado) {\n//     return calcularMovimentosLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado, mercadoComparado);\n// }\n\n\nfunction calcularGolsLinha(row) {\n  return row.slice(1).reduce((total, value) => {\n    // Extrai os placares usando uma expressão regular\n    const placares = value.match(/(\\d+)-(\\d+)/);\n    if (placares) {\n      const golsTime1 = parseInt(placares[1]);\n      const golsTime2 = parseInt(placares[2]);\n      return total + golsTime1 + golsTime2;\n    } else {\n      return total; // Retorna o total inalterado se não houver placares correspondentes\n    }\n  }, 0);\n}\n\n\n\n\nfunction calcularMovimentosLinha(\n  rowIndex,\n  resultadosMercados,\n  mercado,\n  condicao1,\n  condicao2\n) {\n  let contador = 0;\n  const currentRow = resultadosMercados[mercado][rowIndex];\n  const nextRow = resultadosMercados[mercado][rowIndex + 1];\n\n  if (!nextRow) return contador;\n\n  currentRow.slice(1).forEach((result, colIndex) => {\n    const nextResult = nextRow[colIndex + 1];\n    if (result === condicao1 && nextResult === condicao2) {\n      contador++;\n    }\n  });\n\n  return contador;\n}\n\nfunction gerarDadosContagem(resultados) {\n  console.log(resultados);\n}\n\nfunction calcularOscilacaoPorMercado(mosaico, resultadosMercados) {\n  return [...mercadosUnderOver, ...mercadosAmbas].map((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1);\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1);\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0;\n        } else {\n          acumulado += result ? 1 : -1;\n        }\n        oscilacoes.push(acumulado);\n      });\n    }\n\n    return {\n      mercado,\n      oscilacoes,\n    };\n  });\n}\n\nfunction gerarLabelsHoraMaisMinuto(minutos, mosaico) {\n  const labels = [];\n\n  for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n    const currentRow = mosaico[rowIndex].slice(1);\n    const hora = mosaico[rowIndex][0];\n\n    for (let label = 0; label < currentRow.length; label++) {\n      labels.push(\n        `${hora < 10 ? \"0\" + hora : hora}:${\n          minutos[label] < 10 ? \"0\" + minutos[label] : minutos[label]\n        }`\n      );\n    }\n  }\n\n  return labels;\n}\n\nfunction ativarDestaquePontos() {\n  const cellsWithPoints = document.querySelectorAll(\"td span.pontosGraficos\");\n\n  cellsWithPoints.forEach((span) => {\n    span.addEventListener(\"click\", function () {\n      const ponto = this.innerText; // Ponto do span clicado\n      const isHighlighted = this.parentElement.classList.contains(\"highlight\"); // Verifica se já está destacado\n\n      if (isHighlighted) {\n        // Remove o destaque de todas as células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.remove(\"highlight\");\n          }\n        });\n      } else {\n        // Remove os destaques globais\n        document.querySelectorAll(\".highlight\").forEach((el) => {\n          el.classList.remove(\"highlight\");\n        });\n\n        // Adiciona o destaque nas células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.add(\"highlight\");\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto) {\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosUnderOver,\n    \"graficoUnderOver\",\n    \"controlesUnderOver\",\n    labelsHoraMaisMinuto\n  );\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosAmbas,\n    \"graficoAmbas\",\n    \"controlesAmbas\",\n    labelsHoraMaisMinuto\n  );\n}\n\nfunction geraGraficosPorCategoria(\n  dadosOscilacao,\n  mercadosIniciais,\n  canvasId,\n  controlesId,\n  labels\n) {\n  const ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n  if (canvasId === \"graficoUnderOver\" && chartUnderOver) {\n    chartUnderOver.destroy();\n    chartUnderOver = null;\n  } else if (canvasId === \"graficoAmbas\" && chartAmbas) {\n    chartAmbas.destroy();\n    chartAmbas = null;\n  }\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosIniciais.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 3.5,\n      pointHoverRadius: 4,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  const data = {\n    labels,\n    datasets,\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return ` ${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"HorÃ¡rio\",\n        },\n        ticks: {\n          maxRotation: 0,\n          autoSkip: true,\n          stepSize: 5,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Valores Acumulados\",\n        },\n      },\n    },\n  };\n\n  const chart = new Chart(ctx, {\n    type: \"line\",\n    data: data,\n    options: options,\n  });\n\n  if (canvasId === \"graficoUnderOver\") {\n    chartUnderOver = chart;\n  } else if (canvasId === \"graficoAmbas\") {\n    chartAmbas = chart;\n  }\n\n  configurarControleDeMercados(\n    dadosOscilacao,\n    mercadosIniciais,\n    chart,\n    controlesId\n  );\n}\n\nfunction configurarControleDeMercados(\n  dadosOscilacao,\n  mercadosIniciais,\n  chart,\n  controlesId\n) {\n  const controlesContainer = document.getElementById(controlesId);\n  controlesContainer.innerHTML = \"\";\n\n  dadosOscilacao.forEach((dados) => {\n    const mercado = dados.mercado;\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = `mercado-${mercado}-${controlesId}`;\n    checkbox.checked = mercadosIniciais.includes(mercado);\n\n    const label = document.createElement(\"label\");\n    label.htmlFor = `mercado-${mercado}-${controlesId}`;\n    label.textContent = mercado.toUpperCase();\n\n    checkbox.addEventListener(\"change\", () => {\n      atualizarGrafico(dadosOscilacao, chart, controlesId);\n    });\n\n    const container = document.createElement(\"div\");\n    container.style.marginRight = \"10px\";\n    container.style.display = \"inline-block\";\n    container.appendChild(checkbox);\n    container.appendChild(label);\n    controlesContainer.appendChild(container);\n  });\n}\n\nfunction atualizarGrafico(dadosOscilacao, chart, controlesId) {\n  const mercadosSelecionados = Array.from(\n    document.querySelectorAll(`#${controlesId} input:checked`)\n  ).map((input) =>\n    input.id.replace(`mercado-`, \"\").replace(`-${controlesId}`, \"\")\n  );\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosSelecionados.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  chart.data.datasets = datasets;\n  chart.update();\n}\n\n\n\nreturn (_ctx, _cache) => {\n  const _component_PrimeTextarea = _resolveComponent(\"PrimeTextarea\")\n  const _component_PrimeDropdown = _resolveComponent(\"PrimeDropdown\")\n  const _component_PrimeButton = _resolveComponent(\"PrimeButton\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _hoisted_3,\n      _createElementVNode(\"div\", _hoisted_4, [\n        _hoisted_5,\n        _createVNode(_component_PrimeTextarea, {\n          modelValue: dadosAnalise.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((dadosAnalise).value = $event)),\n          placeholder: \"Insira os dados\",\n          class: \"w-full\",\n          rows: \"4\"\n        }, null, 8, [\"modelValue\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createVNode(_component_PrimeDropdown, {\n            modelValue: campeonatoSelecionado.value,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((campeonatoSelecionado).value = $event)),\n            options: campeonatos.value,\n            \"option-label\": \"label\",\n            \"option-value\": \"value\",\n            placeholder: \"Selecione um campeonato\",\n            class: \"w-full\"\n          }, null, 8, [\"modelValue\", \"options\"])\n        ]),\n        _createVNode(_component_PrimeButton, {\n          label: \"Analisar\",\n          severity: \"success\",\n          class: \"w-full\",\n          onClick: onClickAnalisar\n        })\n      ])\n    ]),\n    (showRanks.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rankings.value, (rank, index) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: index,\n              class: \"bg-white shadow-lg rounded-xl p-2\"\n            }, [\n              _createElementVNode(\"h2\", _hoisted_9, _toDisplayString(rank.title), 1),\n              _createElementVNode(\"table\", _hoisted_10, [\n                _hoisted_11,\n                _createElementVNode(\"tbody\", null, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rank.data, (team, i) => {\n                    return (_openBlock(), _createElementBlock(\"tr\", {\n                      key: team.team,\n                      class: \"odd:bg-gray-50 even:bg-white\"\n                    }, [\n                      _createElementVNode(\"td\", _hoisted_12, _toDisplayString(i + 1), 1),\n                      _createElementVNode(\"td\", _hoisted_13, _toDisplayString(team.team), 1),\n                      _createElementVNode(\"td\", _hoisted_14, _toDisplayString(team.value), 1)\n                    ]))\n                  }), 128))\n                ])\n              ])\n            ]))\n          }), 128))\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_15, [\n      _createElementVNode(\"div\", null, [\n        _hoisted_16,\n        _hoisted_17,\n        _createElementVNode(\"div\", _hoisted_18, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[2] || (_cache[2] = $event => (showTable1.value = !showTable1.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_19, null, 512), [\n            [_vShow, showTable1.value]\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", null, [\n        _hoisted_20,\n        _hoisted_21,\n        _createElementVNode(\"div\", _hoisted_22, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[3] || (_cache[3] = $event => (showTable2.value = !showTable2.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_23, null, 512), [\n            [_vShow, showTable2.value]\n          ])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1742846401217,
      "end": 1742846401217,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { definePageMeta } from '/Users/leonardohumbert/Downloads/sistema-futebol-online/nuxt/node_modules/nuxt/dist/pages/runtime/composables';\nimport { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-auto h-auto\" }\nconst _hoisted_2 = { class: \"max-w-2xl mx-auto mb-5\" }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", { class: \"text-2xl font-bold text-center mb-4 text-blue-500\" }, \" Ferramenta BBTips \", -1)\nconst _hoisted_4 = { class: \"mb-4\" }\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"block text-gray-700 font-medium mb-2\" }, \"Dados para Análise\", -1)\nconst _hoisted_6 = { class: \"flex gap-4\" }\nconst _hoisted_7 = { class: \"w-1/2\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-5\"\n}\nconst _hoisted_9 = { class: \"text-lg font-semibold text-gray-700 text-center mb-4\" }\nconst _hoisted_10 = { class: \"w-full border-collapse border border-gray-300\" }\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"thead\", null, [\n  /*#__PURE__*/_createElementVNode(\"tr\", { class: \"bg-gray-100\" }, [\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"#\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Time\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Valor\")\n  ])\n], -1)\nconst _hoisted_12 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_13 = { class: \"border border-gray-300 px-2 py-2\" }\nconst _hoisted_14 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_15 = { id: \"graficos\" }\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesUnderOver\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoUnderOver\" }, null, -1)\nconst _hoisted_18 = { class: \"table\" }\nconst _hoisted_19 = { id: \"tabelao25\" }\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesAmbas\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoAmbas\" }, null, -1)\nconst _hoisted_22 = { class: \"table\" }\nconst _hoisted_23 = { id: \"tabelaambas\" }\n\nimport { ref } from \"vue\";\nimport { Chart } from \"chart.js\";\n\nconst _sfc_main = {\n  __name: 'home',\n  setup(__props) {\n\nconst dadosAnalise = ref(\"\");\nconst showRanks = ref(false);\nconst campeonatoSelecionado = ref(null);\nconst showTable1 = ref(true);\nconst showTable2 = ref(true);\nconst rankings = ref([]);\nconst campeonatos = ref([\n  { label: \"Copa\", value: \"copa\" },\n  { label: \"Euro\", value: \"euro\" },\n  { label: \"Super\", value: \"super\" },\n  { label: \"Premier\", value: \"premier\" },\n]);\n\nfunction extrairGols(partida) {\n  const placar = partida.match(/(\\d+)-(\\d+)/);\n  if (placar) {\n    return parseInt(placar[1]) + parseInt(placar[2]);\n  }\n  return 0;\n}\nconst calculateChamaGol = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const golsPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!golsPorTime[partida.team]) {\n        golsPorTime[partida.team] = [];\n      }\n      golsPorTime[partida.team].push(partida.goals);\n    });\n  });\n\n  const medias = Object.entries(golsPorTime).map(([time, gols]) => {\n    const soma = gols.reduce((acc, gol) => acc + gol, 0);\n    return { team: time, value: (soma / gols.length).toFixed(2) };\n  });\n\n  return medias.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\nconst calculateMaximaMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0] };\n    })\n  );\n\n  const medias = resultados.flat().map((partida) => {\n    const streak = Math.floor(Math.random() * 6);\n    const avg = (streak + Math.random() * 5).toFixed(2);\n    return { team: partida.team, value: `${streak} / ${avg}` };\n  });\n\n  return medias\n    .sort((a, b) => b.value.split(\" / \")[1] - a.value.split(\" / \")[1])\n    .slice(0, 5);\n};\n\nconst calculateAncoraMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const pontosPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!pontosPorTime[partida.team]) {\n        pontosPorTime[partida.team] = 0;\n      }\n      pontosPorTime[partida.team] += partida.goals >= 5 ? 1 : 0;\n    });\n  });\n\n  const pontos = Object.entries(pontosPorTime).map(([time, pontos]) => ({\n    team: time,\n    value: pontos,\n  }));\n\n  return pontos.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\ndefinePageMeta({\n  layout: \"home\",\n  middleware: [],\n});\n\nconst handleFileUpload = (event) => {\n  console.log(\"Arquivo selecionado:\", event.files);\n};\n\n// Função dos graficos\n\nconst onClickAnalisar = () => {\n  const resultadoAnalise = document.getElementById(\"graficos\");\n  showRanks.value = true;\n  if (!resultadoAnalise) {\n    console.error(\"Elemento #graficos não encontrado.\");\n    return;\n  }\n\n  resultadoAnalise.style.display = \"block\";\n  gerarTabelaEGraficos();\n};\n\nlet chartUnderOver = null;\nlet chartAmbas = null;\n\n\n// for (let index = 0; index < tables.length; index++) {\n//   buttons[index].addEventListener(\"click\", () => {\n//     mostrarEsconderTabela(tables[index]);\n//   });\n// }\n\nconst mercadosUnderOver = [\"under25\", \"over25\"];\nconst mercadosAmbas = [\"ambasNao\", \"ambas\"];\n\nconst todasCores = {\n  under25: \"#f53246\",\n  over25: \"#6bf58b\",\n  ambas: \"#6bf58b\",\n  ambasNao: \"#f53246\",\n};\n\nfunction gerarTabelaEGraficos() {\n  dadosAnalise.value = dadosAnalise.value.replace(/\\r?\\n|\\r/g, ' ').replace(/\\s{2,}/g, ' ');\n\n  const dataInput = dadosAnalise.value.trim();\n  if (!dataInput) return;\n\n  const liga = campeonatoSelecionado.value;\n  const minutos = gerarMinutosPorLiga(liga);\n  const mosaico = sanitizarDados(dataInput);\n  rankings.value = [\n  { title: \"Chama Gol\", data: calculateChamaGol(mosaico) },\n  { title: \"Máxima de Mercado\", data: calculateMaximaMercado(mosaico) },\n  { title: \"Âncora de Mercado\", data: calculateAncoraMercado(mosaico) },\n];\n  const resultadosMercados = {};\n  [...mercadosUnderOver, ...mercadosAmbas].forEach((mercado) => {\n    resultadosMercados[mercado] = verificarResultadosMercado(mosaico, mercado);\n  });\n\n  const oscilacoesPorMercado = calcularOscilacaoPorMercadoEspecifico(\n    resultadosMercados,\n    [\"over25\", \"ambas\"]\n  );\n\n  gerarTabela(minutos, mosaico, resultadosMercados, oscilacoesPorMercado);\n\n  // gerarTabela(minutos, mosaico, resultadosMercados);\n\n  const dadosOscilacao = calcularOscilacaoPorMercado(\n    mosaico,\n    resultadosMercados\n  );\n\n  const labelsHoraMaisMinuto = gerarLabelsHoraMaisMinuto(minutos, mosaico);\n\n  gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto);\n}\n\nfunction gerarMinutosPorLiga(liga) {\n  switch (liga) {\n    case \"copa\":\n    case \"super\":\n      return Array.from({ length: 20 }, (_, i) => 1 + i * 3);\n    case \"euro\":\n      return Array.from({ length: 20 }, (_, i) => 2 + i * 3);\n    case \"premier\":\n      return Array.from({ length: 20 }, (_, i) => i * 3);\n    default:\n      return [];\n  }\n}\n\nfunction sanitizarDados(data) {\n  return data.split(\"\\n\").map((row, rowIndex) => {\n    const columns = row.trim().split(/\\t+/); // Divide usando tabulação como separador principal\n    const hora = columns.shift(); // A primeira coluna é sempre a hora\n\n    if (!hora || isNaN(hora)) {\n      console.warn(`Hora inválida na linha ${rowIndex}: ${hora}`);\n    }\n\n    const jogosSanitizados = columns.map((jogo) => {\n      return jogo.replace(\"+\", \"\").trim(); // Remove qualquer \"+\" dos dados\n    });\n\n    return [hora, ...jogosSanitizados];\n  });\n}\n\n\nfunction verificarResultadosMercado(mosaico, mercado) {\n  return mosaico.map((row) => {\n    const hora = row[0]; // Mantemos a hora na primeira posição\n    const resultados = row.slice(1).map((jogo) => {\n      if (!jogo) return false;\n\n      // Extrai os números do placar corretamente\n      const placarMatch = jogo.match(/(\\d+)-(\\d+)$/);\n      if (!placarMatch) return false;\n\n      const time1 = parseInt(placarMatch[1], 10);\n      const time2 = parseInt(placarMatch[2], 10);\n\n      switch (mercado) {\n        case \"under25\":\n          return time1 + time2 < 2.5;\n        case \"over25\":\n          return time1 + time2 >= 2.5;\n        case \"ambas\":\n          return time1 > 0 && time2 > 0;\n        case \"ambasNao\":\n          return !(time1 > 0 && time2 > 0);\n        default:\n          return false;\n      }\n    });\n\n    return [hora, ...resultados];\n  });\n}\n\nfunction calcularOscilacaoPorMercadoEspecifico(resultadosMercados, mercadosAlvo) {\n  const oscilacoesMercado = {};\n\n  mercadosAlvo.forEach((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = resultadosMercados[mercado].length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1); // Ignorar a hora\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1); // Ignorar a hora\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0; // Sem mudança\n        } else {\n          acumulado += result ? 1 : -1; // Incremento ou decremento\n        }\n\n        if (!oscilacoes[rowIndex]) oscilacoes[rowIndex] = [];\n        oscilacoes[rowIndex][colIndex] = acumulado; // Armazena a oscilação\n      });\n    }\n\n    oscilacoesMercado[mercado] = oscilacoes;\n  });\n\n  return oscilacoesMercado;\n}\n\n\nfunction gerarContagensTabela(resultadosMercados, tabelas) {\n  tabelas.forEach((mercadoTabela) => {\n    const table = document.getElementById(mercadoTabela);\n    const linhas = table.querySelectorAll(\"tr\");\n\n    linhas.forEach((linha, rowIndex) => {\n      // Ignora o cabeçalho\n      if (rowIndex === 0) return;\n\n      // Obtém as células da linha atual\n      const cells = linha.querySelectorAll(\"td\");\n      const hora = cells[0].innerText;\n\n      let overCount = 0;\n      let subidaCount = 0;\n      let lateralOverCount = 0;\n      let descidaCount = 0;\n      let lateralUnderCount = 0;\n\n      // Faz as contagens com base nos resultadosMercados\n      for (let colIndex = 1; colIndex < cells.length - 5; colIndex++) {\n        const atualOver = resultadosMercados.over25[rowIndex - 1]?.[colIndex];\n        const anteriorOver = resultadosMercados.over25[rowIndex]?.[colIndex];\n        const atualAmbas = resultadosMercados.ambas[rowIndex - 1]?.[colIndex];\n        const anteriorAmbas = resultadosMercados.ambas[rowIndex]?.[colIndex];\n\n        // Porcentagem over\n        if (atualOver) overCount++;\n\n        // Subidas: Over25 em cima de Under25\n        if (atualOver && !anteriorOver) subidaCount++;\n\n        // Lateralizações Over25: Over25 em cima de Over25\n        if (atualOver && anteriorOver) lateralOverCount++;\n\n        // Descidas: Under25 em cima de Over25\n        if (!atualOver && anteriorOver) descidaCount++;\n\n        // Lateralizações Under25: Under25 em cima de Under25\n        if (!atualOver && !anteriorOver) lateralUnderCount++;\n      }\n\n      // Atualiza as células extras para contagens\n      const porcentagemCell = cells[cells.length - 5];\n      porcentagemCell.innerText = `${(\n        (overCount / (cells.length - 6)) *\n        100\n      ).toFixed(0)}%`;\n\n      const subidaCell = cells[cells.length - 4];\n      subidaCell.innerText = subidaCount;\n\n      const lateralOverCell = cells[cells.length - 3];\n      lateralOverCell.innerText = lateralOverCount;\n\n      const descidaCell = cells[cells.length - 2];\n      descidaCell.innerText = descidaCount;\n\n      const lateralUnderCell = cells[cells.length - 1];\n      lateralUnderCell.innerText = lateralUnderCount;\n    });\n  });\n}\n\nfunction calcularPorcentagemColunas(mosaico, mercado, resultadosMercados) {\n  const porcentagens = [];\n  const totalLinhas = mosaico.length - 1;\n\n  for (let colIndex = 1; colIndex <= 20; colIndex++) {\n    let count = 0;\n\n    for (let rowIndex = 1; rowIndex < mosaico.length; rowIndex++) {\n      if (\n        resultadosMercados[mercado] &&\n        resultadosMercados[mercado][rowIndex]\n      ) {\n        const result = resultadosMercados[mercado][rowIndex][colIndex];\n        if (result) {\n          count++;\n        }\n      }\n    }\n    const porcentagem =\n      totalLinhas > 0 ? ((count / totalLinhas) * 100).toFixed(0) : 0;\n    porcentagens.push(porcentagem);\n  }\n\n  return porcentagens;\n}\n\nfunction calcularPorcentagemPorBlocos(porcentagens) {\n  const blocos = [];\n  let soma = 0;\n\n  porcentagens.forEach((porcentagem, index) => {\n    soma += parseInt(porcentagem, 10); // Garante que seja tratado como número\n    if ((index + 1) % 5 === 0) {\n      // A cada 5 colunas, adiciona ao bloco\n      blocos.push(soma / 5); // Calcula a média\n      soma = 0; // Reseta a soma para o próximo bloco\n    }\n  });\n\n  return blocos;\n}\n\nfunction calcularMediaPorcetagensLinhas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = tabela.querySelectorAll(\"tr\");\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 1) {\n      const celulaPorcentagem = linha.querySelector(\"td:nth-last-child(6)\");\n      if (celulaPorcentagem) {\n        const valor = parseInt(\n          celulaPorcentagem.innerText.replace(\"%\", \"\").trim(),\n          10\n        );\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / contador).toFixed(2))}%` : 0;\n\n  const mediaColunaPorcentagens = document.getElementById(\n    `${tabelaId}mediaColunaPorcentagens`\n  );\n  mediaColunaPorcentagens.innerText = media;\n}\n\nfunction calcularMediaSubidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"subidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaSubidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacaoOver(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesOverCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesOver`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaDescidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"descidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaDescidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacoesUnder(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesUnderCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesUnder`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaGols(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByTagName(\"tr\")); // Pega todas as linhas da tabela\n  let soma = 0;\n  let contador = 0;\n\n  // Itera sobre as linhas, pulando o cabeçalho e a soma de gols\n  for (let i = 1; i < linhas.length - 1; i++) {\n    const celulaGols = linhas[i].querySelector(\".golsCell\"); // Pega a célula de gols da linha\n\n    if (celulaGols) {\n      const valor = parseInt(celulaGols.innerText.trim(), 10);\n\n      if (!isNaN(valor)) {\n        soma += valor;\n        contador++;\n      }\n    }\n  }\n\n  const media = contador > 0 ? `${Math.ceil(soma / contador)}` : 0;\n\n  const mediaColunaGols = document.getElementById(\n    `${tabelaId}mediaColunaGols`\n  );\n  mediaColunaGols.innerText = media;\n}\n\nfunction adicionarLinhaSomaGols(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  if (!mosaico || mosaico.length === 0) {\n    console.warn(\"O mosaico está vazio.\");\n    return;\n  }\n\n  const numColunas = mosaico[0].length - 1; // Número de colunas de resultados\n  const somaGolsPorColuna = Array(numColunas).fill(0);\n\n  mosaico.forEach((row, rowIndex) => {\n    if (rowIndex > 0) {\n      row.slice(1).forEach((cell, colIndex) => {\n        const placar = cell.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const golsTime1 = parseInt(placar[1]);\n          const golsTime2 = parseInt(placar[2]);\n          somaGolsPorColuna[colIndex] += golsTime1 + golsTime2;\n        }\n      });\n    }\n  });\n\n  const linhaSoma = document.createElement(\"tr\");\n  const headerCell = document.createElement(\"td\");\n  headerCell.innerText = \"⚽\";\n  linhaSoma.appendChild(headerCell);\n\n  somaGolsPorColuna.forEach((soma) => {\n    const cell = document.createElement(\"td\");\n    cell.innerText = soma || 0;\n    cell.classList.add(\"somaGolsCell\");\n    linhaSoma.appendChild(cell);\n  });\n\n  const colunasExtras = 6;\n  for (let i = 0; i < colunasExtras; i++) {\n    const emptyCell = document.createElement(\"td\");\n    linhaSoma.appendChild(emptyCell);\n  }\n\n  tabela.insertBefore(linhaSoma, tabela.querySelector(\"tr:nth-child(3)\"));\n}\nfunction adicionarLinhaOscilacaoColunas(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  // Cria uma nova linha para a oscilação\n  const LinhaOscilacaoColunasPorcentagem = document.createElement(\"tr\");\n  const LinhaOscilacaoColunasPorcentagemIcone = document.createElement(\"td\");\n  LinhaOscilacaoColunasPorcentagemIcone.innerHTML = \"📈\"; // Ícone de gráfico\n  LinhaOscilacaoColunasPorcentagem.appendChild(LinhaOscilacaoColunasPorcentagemIcone);\n\n  // Insere a linha logo abaixo da linha de porcentagens\n  const linhas = tabela.getElementsByTagName(\"tr\");\n  const porcentagens = Array.from(linhas[1].querySelectorAll(\"td\")).slice(1); // Obtém porcentagens da linha\n  const resultados = mosaico[0].slice(1); // Obtém os resultados da primeira linha do mosaico\n\n  let acumulado = 0; // Variável para acumular os valores de oscilação\n\n  porcentagens.forEach((porcentagemCelula, index) => {\n    const porcentagem = parseFloat(porcentagemCelula.innerText.replace(\"%\", \"\").trim()); // Obtém a porcentagem como número\n    const resultado = resultados[index]; // Resultado atual da coluna\n    const cell = document.createElement(\"td\"); // Nova célula para a linha de oscilação\n\n    if (resultado) {\n      const partes = resultado.split(\" \"); // Divide por espaço\n      const placar = partes[partes.length - 1]; // Obtém o último elemento (exemplo: \"2-1\")\n      const [golsTime1, golsTime2] = placar.split(\"-\").map(Number); // Converte em números\n\n      if (!isNaN(golsTime1) && !isNaN(golsTime2)) {\n        const totalGols = golsTime1 + golsTime2;\n        const isOver = totalGols > 2.5; // Verifica se o total de gols é maior que 2.5\n\n        if (isOver && porcentagem > 42) {\n          // Over com porcentagem Over -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem <= 42) {\n          // Under com porcentagem Under -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        } else if (isOver && porcentagem <= 42) {\n          // Over com porcentagem Under -> sobe\n          acumulado++; // Incrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem > 42) {\n          // Under com porcentagem Over -> desce\n          acumulado--; // Decrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        }\n      } else {\n        // Se houver erro na extração dos gols, mantemos o acumulado sem alteração\n        cell.innerText = acumulado;\n      }\n    } else {\n      // Caso não tenha resultado, mantém vazio\n      cell.innerText = \"\";\n    }\n\n    LinhaOscilacaoColunasPorcentagem.appendChild(cell);\n  });\n\n  tabela.insertBefore(\n    LinhaOscilacaoColunasPorcentagem,\n    tabela.querySelector(\"tr:nth-child(3)\")\n  );\n}\n\n\nfunction gerarTabela(\n  minutos,\n  mosaico,\n  resultadosMercados,\n  oscilacoesPorMercado\n) {\n  const tabelas = [\"tabelao25\", \"tabelaambas\"];\n\n  tabelas.forEach((mercadoTabela, tabelaIndex) => {\n    const mercado = tabelaIndex === 0 ? \"over25\" : \"ambas\";\n    const table = document.getElementById(mercadoTabela);\n    table.innerHTML = \"\";\n\n    const porcentagens = calcularPorcentagemColunas(\n      mosaico,\n      mercado,\n      resultadosMercados\n    );\n    const porcentagensBloco = calcularPorcentagemPorBlocos(porcentagens);\n\n    /* LINHA DE PORCENTAGEM DOS BLOCOS */\n    const porcentagemBloco = document.createElement(\"tr\");\n    const porcentagemCellBloco = document.createElement(\"td\");\n    porcentagemCellBloco.classList.add(\"percentCell\");\n    porcentagemCellBloco.innerText = \"%\";\n    porcentagemBloco.appendChild(porcentagemCellBloco);\n\n    for (let index = 0; index < porcentagensBloco.length; index++) {\n      const porcentagemCellsBloco = document.createElement(\"td\");\n      porcentagemCellsBloco.setAttribute(\"colspan\", \"5\");\n      porcentagemCellsBloco.innerText = `${porcentagensBloco[index]}%`;\n      porcentagemCellsBloco.classList.add(\"percentCell\");\n      porcentagemCellsBloco.classList.add(\n        porcentagensBloco[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemBloco.appendChild(porcentagemCellsBloco);\n    }\n\n    table.appendChild(porcentagemBloco);\n\n    /* LINHA DE PORCENTAGEM DASCOLUNAS */\n\n    const porcentagemRow = document.createElement(\"tr\");\n    const porcentagemCell = document.createElement(\"td\");\n    porcentagemCell.classList.add(\"percentCell\");\n    porcentagemCell.innerText = \"%\";\n    porcentagemRow.appendChild(porcentagemCell);\n\n    for (let index = 0; index < porcentagens.length; index++) {\n      const porcentagemCells = document.createElement(\"td\");\n      porcentagemCells.innerText = `${porcentagens[index]}%`;\n      porcentagemCells.classList.add(\"percentCell\");\n      porcentagemCells.classList.add(\n        porcentagens[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemRow.appendChild(porcentagemCells);\n    }\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaPorcentagens = document.createElement(\"td\");\n    mediaColunaPorcentagens.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaPorcentagens`\n    );\n    porcentagemRow.appendChild(mediaColunaPorcentagens);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaSubidas = document.createElement(\"td\");\n    mediaColunaSubidas.setAttribute(\"id\", `${mercadoTabela}mediaColunaSubidas`);\n    porcentagemRow.appendChild(mediaColunaSubidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesOver = document.createElement(\"td\");\n    mediaColunaLateralizacoesOver.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesOver`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesOver);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaDescidas = document.createElement(\"td\");\n    mediaColunaDescidas.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaDescidas`\n    );\n    porcentagemRow.appendChild(mediaColunaDescidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesUnder = document.createElement(\"td\");\n    mediaColunaLateralizacoesUnder.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesUnder`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesUnder);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaGols = document.createElement(\"td\");\n    mediaColunaGols.setAttribute(\"id\", `${mercadoTabela}mediaColunaGols`);\n    porcentagemRow.appendChild(mediaColunaGols);\n\n    table.appendChild(porcentagemRow);\n\n    const headerRow = document.createElement(\"tr\");\n    const headerCell = document.createElement(\"th\");\n    headerCell.innerText = \"Hora\";\n    headerRow.appendChild(headerCell);\n\n    minutos.forEach((minuto) => {\n      const th = document.createElement(\"th\");\n      th.innerText = `${minuto < 10 ? \"0\" + minuto : minuto}`;\n      headerRow.appendChild(th);\n    });\n\n    const icones = [\"％\", \"⬆️\", \"↔️\", \"⬇️\", \"⇆\", \"⚽\"];\n    icones.forEach((icone) => {\n      const th = document.createElement(\"th\");\n      th.innerText = icone;\n      headerRow.appendChild(th);\n    });\n\n    table.appendChild(headerRow);\n\n    // Linhas\n    mosaico.forEach((row, rowIndex) => {\n  const tableRow = document.createElement(\"tr\");\n  const hourCell = document.createElement(\"td\");\n  hourCell.innerText = row[0] < 10 ? `0${row[0]}` : row[0];\n  hourCell.classList.add(\"firstCollumn\");\n  tableRow.appendChild(hourCell);\n\n  let rodadaClasse = \"\"; // Classe que será aplicada à linha\n\n  // Adiciona células para os resultados\n  row.slice(1).forEach((value, colIndex) => {\n        const cell = document.createElement(\"td\");\n        cell.innerText = value || \"\";\n\n        // Cor para os mercados\n        const placar = value.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const time1 = parseInt(placar[1]);\n          const time2 = parseInt(placar[2]);\n          let rodadaClasse = \"\";\n          if (mercado === \"over25\") {\n            rodadaClasse = time1 + time2 > 2 ? \"green\" : \"red\";\n          } else if (mercado === \"ambas\") {\n            rodadaClasse = time1 > 0 && time2 > 0 ? \"green\" : \"red\";\n          }\n          if (rodadaClasse) {\n            cell.classList.add(rodadaClasse);\n          }\n        }\n\n        tableRow.appendChild(cell);\n      });\n\n  // Aplica a classe da rodada para toda a linha\n  if (rodadaClasse) {\n    tableRow.classList.add(rodadaClasse);\n  }\n\n  // Preenche células vazias se a linha não tiver o número total de minutos\n  const colunasRestantes = minutos.length - row.slice(1).length;\n  for (let i = 0; i < colunasRestantes; i++) {\n    const emptyCell = document.createElement(\"td\");\n    emptyCell.innerText = \"\";\n    tableRow.appendChild(emptyCell);\n  }\n\n  // Adiciona as colunas adicionais ao final da linha\n  const porcentagemMercadoCell = document.createElement(\"td\");\n  porcentagemMercadoCell.innerText = calcularPorcentagemLinha(\n    rowIndex,\n    resultadosMercados[mercado]\n  );\n  tableRow.appendChild(porcentagemMercadoCell);\n\n  const subidasCell = document.createElement(\"td\");\n  subidasCell.classList.add(\"subidasCell\");\n  subidasCell.innerText = calcularSubidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(subidasCell);\n\n  const lateralizacoesOverCell = document.createElement(\"td\");\n  lateralizacoesOverCell.classList.add(\"lateralizacoesOverCell\");\n  lateralizacoesOverCell.innerText = calcularLateralizacaoVerde(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesOverCell);\n\n  const descidasCell = document.createElement(\"td\");\n  descidasCell.classList.add(\"descidasCell\");\n  descidasCell.innerText = calcularDescidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(descidasCell);\n\n  const lateralizacoesUnderCell = document.createElement(\"td\");\n  lateralizacoesUnderCell.classList.add(\"lateralizacoesUnderCell\");\n  lateralizacoesUnderCell.innerText = calcularLateralizacaoVermelho(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesUnderCell);\n\n  const golsCell = document.createElement(\"td\");\n  golsCell.classList.add(\"golsCell\");\n  golsCell.innerText = calcularGolsLinha(row);\n  tableRow.appendChild(golsCell);\n\n  table.appendChild(tableRow);\n});\n\n\n    calcularMediaPorcetagensLinhas(mercadoTabela);\n    calcularMediaSubidas(mercadoTabela);\n    calcularMediaLateralizacaoOver(mercadoTabela);\n    calcularMediaDescidas(mercadoTabela);\n    calcularMediaLateralizacoesUnder(mercadoTabela);\n    calcularMediaGols(mercadoTabela);\n    adicionarLinhaSomaGols(mercadoTabela, mosaico);\n    adicionarLinhaOscilacaoColunas(mercadoTabela, mosaico);\n  });\n\n  ativarDestaquePontos();\n}\n\n// Funções auxiliares\nfunction calcularPorcentagemLinha(rowIndex, resultadosMercado) {\n  const total = resultadosMercado[rowIndex].slice(1).length;\n  const ocorrencias = resultadosMercado[rowIndex]\n    .slice(1)\n    .filter(Boolean).length;\n  return `${Math.round((ocorrencias / total) * 100)}%`;\n}\n\nfunction calcularSubidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    false\n  );\n}\n\nfunction calcularDescidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVerde(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVermelho(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    false\n  );\n}\n\n// function calcularLateralizacoesLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado) {\n//     return calcularMovimentosLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado, mercadoComparado);\n// }\n\n\nfunction calcularGolsLinha(row) {\n  return row.slice(1).reduce((total, value) => {\n    // Extrai os placares usando uma expressão regular\n    const placares = value.match(/(\\d+)-(\\d+)/);\n    if (placares) {\n      const golsTime1 = parseInt(placares[1]);\n      const golsTime2 = parseInt(placares[2]);\n      return total + golsTime1 + golsTime2;\n    } else {\n      return total; // Retorna o total inalterado se não houver placares correspondentes\n    }\n  }, 0);\n}\n\n\n\n\nfunction calcularMovimentosLinha(\n  rowIndex,\n  resultadosMercados,\n  mercado,\n  condicao1,\n  condicao2\n) {\n  let contador = 0;\n  const currentRow = resultadosMercados[mercado][rowIndex];\n  const nextRow = resultadosMercados[mercado][rowIndex + 1];\n\n  if (!nextRow) return contador;\n\n  currentRow.slice(1).forEach((result, colIndex) => {\n    const nextResult = nextRow[colIndex + 1];\n    if (result === condicao1 && nextResult === condicao2) {\n      contador++;\n    }\n  });\n\n  return contador;\n}\n\nfunction gerarDadosContagem(resultados) {\n  console.log(resultados);\n}\n\nfunction calcularOscilacaoPorMercado(mosaico, resultadosMercados) {\n  return [...mercadosUnderOver, ...mercadosAmbas].map((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1);\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1);\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0;\n        } else {\n          acumulado += result ? 1 : -1;\n        }\n        oscilacoes.push(acumulado);\n      });\n    }\n\n    return {\n      mercado,\n      oscilacoes,\n    };\n  });\n}\n\nfunction gerarLabelsHoraMaisMinuto(minutos, mosaico) {\n  const labels = [];\n\n  for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n    const currentRow = mosaico[rowIndex].slice(1);\n    const hora = mosaico[rowIndex][0];\n\n    for (let label = 0; label < currentRow.length; label++) {\n      labels.push(\n        `${hora < 10 ? \"0\" + hora : hora}:${\n          minutos[label] < 10 ? \"0\" + minutos[label] : minutos[label]\n        }`\n      );\n    }\n  }\n\n  return labels;\n}\n\nfunction ativarDestaquePontos() {\n  const cellsWithPoints = document.querySelectorAll(\"td span.pontosGraficos\");\n\n  cellsWithPoints.forEach((span) => {\n    span.addEventListener(\"click\", function () {\n      const ponto = this.innerText; // Ponto do span clicado\n      const isHighlighted = this.parentElement.classList.contains(\"highlight\"); // Verifica se já está destacado\n\n      if (isHighlighted) {\n        // Remove o destaque de todas as células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.remove(\"highlight\");\n          }\n        });\n      } else {\n        // Remove os destaques globais\n        document.querySelectorAll(\".highlight\").forEach((el) => {\n          el.classList.remove(\"highlight\");\n        });\n\n        // Adiciona o destaque nas células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.add(\"highlight\");\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto) {\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosUnderOver,\n    \"graficoUnderOver\",\n    \"controlesUnderOver\",\n    labelsHoraMaisMinuto\n  );\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosAmbas,\n    \"graficoAmbas\",\n    \"controlesAmbas\",\n    labelsHoraMaisMinuto\n  );\n}\n\nfunction geraGraficosPorCategoria(\n  dadosOscilacao,\n  mercadosIniciais,\n  canvasId,\n  controlesId,\n  labels\n) {\n  const ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n  if (canvasId === \"graficoUnderOver\" && chartUnderOver) {\n    chartUnderOver.destroy();\n    chartUnderOver = null;\n  } else if (canvasId === \"graficoAmbas\" && chartAmbas) {\n    chartAmbas.destroy();\n    chartAmbas = null;\n  }\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosIniciais.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 3.5,\n      pointHoverRadius: 4,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  const data = {\n    labels,\n    datasets,\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return ` ${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"HorÃ¡rio\",\n        },\n        ticks: {\n          maxRotation: 0,\n          autoSkip: true,\n          stepSize: 5,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Valores Acumulados\",\n        },\n      },\n    },\n  };\n\n  const chart = new Chart(ctx, {\n    type: \"line\",\n    data: data,\n    options: options,\n  });\n\n  if (canvasId === \"graficoUnderOver\") {\n    chartUnderOver = chart;\n  } else if (canvasId === \"graficoAmbas\") {\n    chartAmbas = chart;\n  }\n\n  configurarControleDeMercados(\n    dadosOscilacao,\n    mercadosIniciais,\n    chart,\n    controlesId\n  );\n}\n\nfunction configurarControleDeMercados(\n  dadosOscilacao,\n  mercadosIniciais,\n  chart,\n  controlesId\n) {\n  const controlesContainer = document.getElementById(controlesId);\n  controlesContainer.innerHTML = \"\";\n\n  dadosOscilacao.forEach((dados) => {\n    const mercado = dados.mercado;\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = `mercado-${mercado}-${controlesId}`;\n    checkbox.checked = mercadosIniciais.includes(mercado);\n\n    const label = document.createElement(\"label\");\n    label.htmlFor = `mercado-${mercado}-${controlesId}`;\n    label.textContent = mercado.toUpperCase();\n\n    checkbox.addEventListener(\"change\", () => {\n      atualizarGrafico(dadosOscilacao, chart, controlesId);\n    });\n\n    const container = document.createElement(\"div\");\n    container.style.marginRight = \"10px\";\n    container.style.display = \"inline-block\";\n    container.appendChild(checkbox);\n    container.appendChild(label);\n    controlesContainer.appendChild(container);\n  });\n}\n\nfunction atualizarGrafico(dadosOscilacao, chart, controlesId) {\n  const mercadosSelecionados = Array.from(\n    document.querySelectorAll(`#${controlesId} input:checked`)\n  ).map((input) =>\n    input.id.replace(`mercado-`, \"\").replace(`-${controlesId}`, \"\")\n  );\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosSelecionados.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  chart.data.datasets = datasets;\n  chart.update();\n}\n\n\n\nreturn (_ctx, _cache) => {\n  const _component_PrimeTextarea = _resolveComponent(\"PrimeTextarea\")\n  const _component_PrimeDropdown = _resolveComponent(\"PrimeDropdown\")\n  const _component_PrimeButton = _resolveComponent(\"PrimeButton\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _hoisted_3,\n      _createElementVNode(\"div\", _hoisted_4, [\n        _hoisted_5,\n        _createVNode(_component_PrimeTextarea, {\n          modelValue: dadosAnalise.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((dadosAnalise).value = $event)),\n          placeholder: \"Insira os dados\",\n          class: \"w-full\",\n          rows: \"4\"\n        }, null, 8, [\"modelValue\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createVNode(_component_PrimeDropdown, {\n            modelValue: campeonatoSelecionado.value,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((campeonatoSelecionado).value = $event)),\n            options: campeonatos.value,\n            \"option-label\": \"label\",\n            \"option-value\": \"value\",\n            placeholder: \"Selecione um campeonato\",\n            class: \"w-full\"\n          }, null, 8, [\"modelValue\", \"options\"])\n        ]),\n        _createVNode(_component_PrimeButton, {\n          label: \"Analisar\",\n          severity: \"success\",\n          class: \"w-full\",\n          onClick: onClickAnalisar\n        })\n      ])\n    ]),\n    (showRanks.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rankings.value, (rank, index) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: index,\n              class: \"bg-white shadow-lg rounded-xl p-2\"\n            }, [\n              _createElementVNode(\"h2\", _hoisted_9, _toDisplayString(rank.title), 1),\n              _createElementVNode(\"table\", _hoisted_10, [\n                _hoisted_11,\n                _createElementVNode(\"tbody\", null, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rank.data, (team, i) => {\n                    return (_openBlock(), _createElementBlock(\"tr\", {\n                      key: team.team,\n                      class: \"odd:bg-gray-50 even:bg-white\"\n                    }, [\n                      _createElementVNode(\"td\", _hoisted_12, _toDisplayString(i + 1), 1),\n                      _createElementVNode(\"td\", _hoisted_13, _toDisplayString(team.team), 1),\n                      _createElementVNode(\"td\", _hoisted_14, _toDisplayString(team.value), 1)\n                    ]))\n                  }), 128))\n                ])\n              ])\n            ]))\n          }), 128))\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_15, [\n      _createElementVNode(\"div\", null, [\n        _hoisted_16,\n        _hoisted_17,\n        _createElementVNode(\"div\", _hoisted_18, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[2] || (_cache[2] = $event => (showTable1.value = !showTable1.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_19, null, 512), [\n            [_vShow, showTable1.value]\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", null, [\n        _hoisted_20,\n        _hoisted_21,\n        _createElementVNode(\"div\", _hoisted_22, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[3] || (_cache[3] = $event => (showTable2.value = !showTable2.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_23, null, 512), [\n            [_vShow, showTable2.value]\n          ])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1742846401217,
      "end": 1742846401227,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappingsvbtpJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpxI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACplG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClG,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjtjpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvvD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtlE,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpvC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC;AACD;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxhC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvntvD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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Cf;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChhrD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrxC,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACfrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACfrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACfrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChrtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxtF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACntE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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AAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACztD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzjxC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrnD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzxD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACthF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvrtrpD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACttC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzhE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AACH;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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AC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvtH,CAAC,CAAC,CAAC,CAAC;AACJ;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChhH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClzlE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC;AACH;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtlD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrlD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AACD;AACA;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACztG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrhH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACprE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC;AACD,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1742846401227,
      "end": 1742846401232,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1742846401232,
      "end": 1742846401232,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1742846401232,
      "end": 1742846401232,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1742846401232,
      "end": 1742846401232,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"primevue/textarea\";\nimport { default as __nuxt_component_1 } from \"primevue/dropdown\";\nimport { default as __nuxt_component_2 } from \"primevue/button\";\nimport { definePageMeta } from '/Users/leonardohumbert/Downloads/sistema-futebol-online/nuxt/node_modules/nuxt/dist/pages/runtime/composables';\nimport { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-auto h-auto\" }\nconst _hoisted_2 = { class: \"max-w-2xl mx-auto mb-5\" }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", { class: \"text-2xl font-bold text-center mb-4 text-blue-500\" }, \" Ferramenta BBTips \", -1)\nconst _hoisted_4 = { class: \"mb-4\" }\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"block text-gray-700 font-medium mb-2\" }, \"Dados para Análise\", -1)\nconst _hoisted_6 = { class: \"flex gap-4\" }\nconst _hoisted_7 = { class: \"w-1/2\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-5\"\n}\nconst _hoisted_9 = { class: \"text-lg font-semibold text-gray-700 text-center mb-4\" }\nconst _hoisted_10 = { class: \"w-full border-collapse border border-gray-300\" }\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"thead\", null, [\n  /*#__PURE__*/_createElementVNode(\"tr\", { class: \"bg-gray-100\" }, [\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"#\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Time\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Valor\")\n  ])\n], -1)\nconst _hoisted_12 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_13 = { class: \"border border-gray-300 px-2 py-2\" }\nconst _hoisted_14 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_15 = { id: \"graficos\" }\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesUnderOver\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoUnderOver\" }, null, -1)\nconst _hoisted_18 = { class: \"table\" }\nconst _hoisted_19 = { id: \"tabelao25\" }\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesAmbas\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoAmbas\" }, null, -1)\nconst _hoisted_22 = { class: \"table\" }\nconst _hoisted_23 = { id: \"tabelaambas\" }\n\nimport { ref } from \"vue\";\nimport { Chart } from \"chart.js\";\n\nconst _sfc_main = {\n  __name: 'home',\n  setup(__props) {\n\nconst dadosAnalise = ref(\"\");\nconst showRanks = ref(false);\nconst campeonatoSelecionado = ref(null);\nconst showTable1 = ref(true);\nconst showTable2 = ref(true);\nconst rankings = ref([]);\nconst campeonatos = ref([\n  { label: \"Copa\", value: \"copa\" },\n  { label: \"Euro\", value: \"euro\" },\n  { label: \"Super\", value: \"super\" },\n  { label: \"Premier\", value: \"premier\" },\n]);\n\nfunction extrairGols(partida) {\n  const placar = partida.match(/(\\d+)-(\\d+)/);\n  if (placar) {\n    return parseInt(placar[1]) + parseInt(placar[2]);\n  }\n  return 0;\n}\nconst calculateChamaGol = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const golsPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!golsPorTime[partida.team]) {\n        golsPorTime[partida.team] = [];\n      }\n      golsPorTime[partida.team].push(partida.goals);\n    });\n  });\n\n  const medias = Object.entries(golsPorTime).map(([time, gols]) => {\n    const soma = gols.reduce((acc, gol) => acc + gol, 0);\n    return { team: time, value: (soma / gols.length).toFixed(2) };\n  });\n\n  return medias.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\nconst calculateMaximaMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0] };\n    })\n  );\n\n  const medias = resultados.flat().map((partida) => {\n    const streak = Math.floor(Math.random() * 6);\n    const avg = (streak + Math.random() * 5).toFixed(2);\n    return { team: partida.team, value: `${streak} / ${avg}` };\n  });\n\n  return medias\n    .sort((a, b) => b.value.split(\" / \")[1] - a.value.split(\" / \")[1])\n    .slice(0, 5);\n};\n\nconst calculateAncoraMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const pontosPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!pontosPorTime[partida.team]) {\n        pontosPorTime[partida.team] = 0;\n      }\n      pontosPorTime[partida.team] += partida.goals >= 5 ? 1 : 0;\n    });\n  });\n\n  const pontos = Object.entries(pontosPorTime).map(([time, pontos]) => ({\n    team: time,\n    value: pontos,\n  }));\n\n  return pontos.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\ndefinePageMeta({\n  layout: \"home\",\n  middleware: [],\n});\n\nconst handleFileUpload = (event) => {\n  console.log(\"Arquivo selecionado:\", event.files);\n};\n\n// Função dos graficos\n\nconst onClickAnalisar = () => {\n  const resultadoAnalise = document.getElementById(\"graficos\");\n  showRanks.value = true;\n  if (!resultadoAnalise) {\n    console.error(\"Elemento #graficos não encontrado.\");\n    return;\n  }\n\n  resultadoAnalise.style.display = \"block\";\n  gerarTabelaEGraficos();\n};\n\nlet chartUnderOver = null;\nlet chartAmbas = null;\n\n\n// for (let index = 0; index < tables.length; index++) {\n//   buttons[index].addEventListener(\"click\", () => {\n//     mostrarEsconderTabela(tables[index]);\n//   });\n// }\n\nconst mercadosUnderOver = [\"under25\", \"over25\"];\nconst mercadosAmbas = [\"ambasNao\", \"ambas\"];\n\nconst todasCores = {\n  under25: \"#f53246\",\n  over25: \"#6bf58b\",\n  ambas: \"#6bf58b\",\n  ambasNao: \"#f53246\",\n};\n\nfunction gerarTabelaEGraficos() {\n  dadosAnalise.value = dadosAnalise.value.replace(/\\r?\\n|\\r/g, ' ').replace(/\\s{2,}/g, ' ');\n\n  const dataInput = dadosAnalise.value.trim();\n  if (!dataInput) return;\n\n  const liga = campeonatoSelecionado.value;\n  const minutos = gerarMinutosPorLiga(liga);\n  const mosaico = sanitizarDados(dataInput);\n  rankings.value = [\n  { title: \"Chama Gol\", data: calculateChamaGol(mosaico) },\n  { title: \"Máxima de Mercado\", data: calculateMaximaMercado(mosaico) },\n  { title: \"Âncora de Mercado\", data: calculateAncoraMercado(mosaico) },\n];\n  const resultadosMercados = {};\n  [...mercadosUnderOver, ...mercadosAmbas].forEach((mercado) => {\n    resultadosMercados[mercado] = verificarResultadosMercado(mosaico, mercado);\n  });\n\n  const oscilacoesPorMercado = calcularOscilacaoPorMercadoEspecifico(\n    resultadosMercados,\n    [\"over25\", \"ambas\"]\n  );\n\n  gerarTabela(minutos, mosaico, resultadosMercados, oscilacoesPorMercado);\n\n  // gerarTabela(minutos, mosaico, resultadosMercados);\n\n  const dadosOscilacao = calcularOscilacaoPorMercado(\n    mosaico,\n    resultadosMercados\n  );\n\n  const labelsHoraMaisMinuto = gerarLabelsHoraMaisMinuto(minutos, mosaico);\n\n  gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto);\n}\n\nfunction gerarMinutosPorLiga(liga) {\n  switch (liga) {\n    case \"copa\":\n    case \"super\":\n      return Array.from({ length: 20 }, (_, i) => 1 + i * 3);\n    case \"euro\":\n      return Array.from({ length: 20 }, (_, i) => 2 + i * 3);\n    case \"premier\":\n      return Array.from({ length: 20 }, (_, i) => i * 3);\n    default:\n      return [];\n  }\n}\n\nfunction sanitizarDados(data) {\n  return data.split(\"\\n\").map((row, rowIndex) => {\n    const columns = row.trim().split(/\\t+/); // Divide usando tabulação como separador principal\n    const hora = columns.shift(); // A primeira coluna é sempre a hora\n\n    if (!hora || isNaN(hora)) {\n      console.warn(`Hora inválida na linha ${rowIndex}: ${hora}`);\n    }\n\n    const jogosSanitizados = columns.map((jogo) => {\n      return jogo.replace(\"+\", \"\").trim(); // Remove qualquer \"+\" dos dados\n    });\n\n    return [hora, ...jogosSanitizados];\n  });\n}\n\n\nfunction verificarResultadosMercado(mosaico, mercado) {\n  return mosaico.map((row) => {\n    const hora = row[0]; // Mantemos a hora na primeira posição\n    const resultados = row.slice(1).map((jogo) => {\n      if (!jogo) return false;\n\n      // Extrai os números do placar corretamente\n      const placarMatch = jogo.match(/(\\d+)-(\\d+)$/);\n      if (!placarMatch) return false;\n\n      const time1 = parseInt(placarMatch[1], 10);\n      const time2 = parseInt(placarMatch[2], 10);\n\n      switch (mercado) {\n        case \"under25\":\n          return time1 + time2 < 2.5;\n        case \"over25\":\n          return time1 + time2 >= 2.5;\n        case \"ambas\":\n          return time1 > 0 && time2 > 0;\n        case \"ambasNao\":\n          return !(time1 > 0 && time2 > 0);\n        default:\n          return false;\n      }\n    });\n\n    return [hora, ...resultados];\n  });\n}\n\nfunction calcularOscilacaoPorMercadoEspecifico(resultadosMercados, mercadosAlvo) {\n  const oscilacoesMercado = {};\n\n  mercadosAlvo.forEach((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = resultadosMercados[mercado].length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1); // Ignorar a hora\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1); // Ignorar a hora\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0; // Sem mudança\n        } else {\n          acumulado += result ? 1 : -1; // Incremento ou decremento\n        }\n\n        if (!oscilacoes[rowIndex]) oscilacoes[rowIndex] = [];\n        oscilacoes[rowIndex][colIndex] = acumulado; // Armazena a oscilação\n      });\n    }\n\n    oscilacoesMercado[mercado] = oscilacoes;\n  });\n\n  return oscilacoesMercado;\n}\n\n\nfunction gerarContagensTabela(resultadosMercados, tabelas) {\n  tabelas.forEach((mercadoTabela) => {\n    const table = document.getElementById(mercadoTabela);\n    const linhas = table.querySelectorAll(\"tr\");\n\n    linhas.forEach((linha, rowIndex) => {\n      // Ignora o cabeçalho\n      if (rowIndex === 0) return;\n\n      // Obtém as células da linha atual\n      const cells = linha.querySelectorAll(\"td\");\n      const hora = cells[0].innerText;\n\n      let overCount = 0;\n      let subidaCount = 0;\n      let lateralOverCount = 0;\n      let descidaCount = 0;\n      let lateralUnderCount = 0;\n\n      // Faz as contagens com base nos resultadosMercados\n      for (let colIndex = 1; colIndex < cells.length - 5; colIndex++) {\n        const atualOver = resultadosMercados.over25[rowIndex - 1]?.[colIndex];\n        const anteriorOver = resultadosMercados.over25[rowIndex]?.[colIndex];\n        const atualAmbas = resultadosMercados.ambas[rowIndex - 1]?.[colIndex];\n        const anteriorAmbas = resultadosMercados.ambas[rowIndex]?.[colIndex];\n\n        // Porcentagem over\n        if (atualOver) overCount++;\n\n        // Subidas: Over25 em cima de Under25\n        if (atualOver && !anteriorOver) subidaCount++;\n\n        // Lateralizações Over25: Over25 em cima de Over25\n        if (atualOver && anteriorOver) lateralOverCount++;\n\n        // Descidas: Under25 em cima de Over25\n        if (!atualOver && anteriorOver) descidaCount++;\n\n        // Lateralizações Under25: Under25 em cima de Under25\n        if (!atualOver && !anteriorOver) lateralUnderCount++;\n      }\n\n      // Atualiza as células extras para contagens\n      const porcentagemCell = cells[cells.length - 5];\n      porcentagemCell.innerText = `${(\n        (overCount / (cells.length - 6)) *\n        100\n      ).toFixed(0)}%`;\n\n      const subidaCell = cells[cells.length - 4];\n      subidaCell.innerText = subidaCount;\n\n      const lateralOverCell = cells[cells.length - 3];\n      lateralOverCell.innerText = lateralOverCount;\n\n      const descidaCell = cells[cells.length - 2];\n      descidaCell.innerText = descidaCount;\n\n      const lateralUnderCell = cells[cells.length - 1];\n      lateralUnderCell.innerText = lateralUnderCount;\n    });\n  });\n}\n\nfunction calcularPorcentagemColunas(mosaico, mercado, resultadosMercados) {\n  const porcentagens = [];\n  const totalLinhas = mosaico.length - 1;\n\n  for (let colIndex = 1; colIndex <= 20; colIndex++) {\n    let count = 0;\n\n    for (let rowIndex = 1; rowIndex < mosaico.length; rowIndex++) {\n      if (\n        resultadosMercados[mercado] &&\n        resultadosMercados[mercado][rowIndex]\n      ) {\n        const result = resultadosMercados[mercado][rowIndex][colIndex];\n        if (result) {\n          count++;\n        }\n      }\n    }\n    const porcentagem =\n      totalLinhas > 0 ? ((count / totalLinhas) * 100).toFixed(0) : 0;\n    porcentagens.push(porcentagem);\n  }\n\n  return porcentagens;\n}\n\nfunction calcularPorcentagemPorBlocos(porcentagens) {\n  const blocos = [];\n  let soma = 0;\n\n  porcentagens.forEach((porcentagem, index) => {\n    soma += parseInt(porcentagem, 10); // Garante que seja tratado como número\n    if ((index + 1) % 5 === 0) {\n      // A cada 5 colunas, adiciona ao bloco\n      blocos.push(soma / 5); // Calcula a média\n      soma = 0; // Reseta a soma para o próximo bloco\n    }\n  });\n\n  return blocos;\n}\n\nfunction calcularMediaPorcetagensLinhas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = tabela.querySelectorAll(\"tr\");\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 1) {\n      const celulaPorcentagem = linha.querySelector(\"td:nth-last-child(6)\");\n      if (celulaPorcentagem) {\n        const valor = parseInt(\n          celulaPorcentagem.innerText.replace(\"%\", \"\").trim(),\n          10\n        );\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / contador).toFixed(2))}%` : 0;\n\n  const mediaColunaPorcentagens = document.getElementById(\n    `${tabelaId}mediaColunaPorcentagens`\n  );\n  mediaColunaPorcentagens.innerText = media;\n}\n\nfunction calcularMediaSubidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"subidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaSubidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacaoOver(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesOverCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesOver`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaDescidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"descidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaDescidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacoesUnder(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesUnderCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesUnder`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaGols(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByTagName(\"tr\")); // Pega todas as linhas da tabela\n  let soma = 0;\n  let contador = 0;\n\n  // Itera sobre as linhas, pulando o cabeçalho e a soma de gols\n  for (let i = 1; i < linhas.length - 1; i++) {\n    const celulaGols = linhas[i].querySelector(\".golsCell\"); // Pega a célula de gols da linha\n\n    if (celulaGols) {\n      const valor = parseInt(celulaGols.innerText.trim(), 10);\n\n      if (!isNaN(valor)) {\n        soma += valor;\n        contador++;\n      }\n    }\n  }\n\n  const media = contador > 0 ? `${Math.ceil(soma / contador)}` : 0;\n\n  const mediaColunaGols = document.getElementById(\n    `${tabelaId}mediaColunaGols`\n  );\n  mediaColunaGols.innerText = media;\n}\n\nfunction adicionarLinhaSomaGols(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  if (!mosaico || mosaico.length === 0) {\n    console.warn(\"O mosaico está vazio.\");\n    return;\n  }\n\n  const numColunas = mosaico[0].length - 1; // Número de colunas de resultados\n  const somaGolsPorColuna = Array(numColunas).fill(0);\n\n  mosaico.forEach((row, rowIndex) => {\n    if (rowIndex > 0) {\n      row.slice(1).forEach((cell, colIndex) => {\n        const placar = cell.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const golsTime1 = parseInt(placar[1]);\n          const golsTime2 = parseInt(placar[2]);\n          somaGolsPorColuna[colIndex] += golsTime1 + golsTime2;\n        }\n      });\n    }\n  });\n\n  const linhaSoma = document.createElement(\"tr\");\n  const headerCell = document.createElement(\"td\");\n  headerCell.innerText = \"⚽\";\n  linhaSoma.appendChild(headerCell);\n\n  somaGolsPorColuna.forEach((soma) => {\n    const cell = document.createElement(\"td\");\n    cell.innerText = soma || 0;\n    cell.classList.add(\"somaGolsCell\");\n    linhaSoma.appendChild(cell);\n  });\n\n  const colunasExtras = 6;\n  for (let i = 0; i < colunasExtras; i++) {\n    const emptyCell = document.createElement(\"td\");\n    linhaSoma.appendChild(emptyCell);\n  }\n\n  tabela.insertBefore(linhaSoma, tabela.querySelector(\"tr:nth-child(3)\"));\n}\nfunction adicionarLinhaOscilacaoColunas(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  // Cria uma nova linha para a oscilação\n  const LinhaOscilacaoColunasPorcentagem = document.createElement(\"tr\");\n  const LinhaOscilacaoColunasPorcentagemIcone = document.createElement(\"td\");\n  LinhaOscilacaoColunasPorcentagemIcone.innerHTML = \"📈\"; // Ícone de gráfico\n  LinhaOscilacaoColunasPorcentagem.appendChild(LinhaOscilacaoColunasPorcentagemIcone);\n\n  // Insere a linha logo abaixo da linha de porcentagens\n  const linhas = tabela.getElementsByTagName(\"tr\");\n  const porcentagens = Array.from(linhas[1].querySelectorAll(\"td\")).slice(1); // Obtém porcentagens da linha\n  const resultados = mosaico[0].slice(1); // Obtém os resultados da primeira linha do mosaico\n\n  let acumulado = 0; // Variável para acumular os valores de oscilação\n\n  porcentagens.forEach((porcentagemCelula, index) => {\n    const porcentagem = parseFloat(porcentagemCelula.innerText.replace(\"%\", \"\").trim()); // Obtém a porcentagem como número\n    const resultado = resultados[index]; // Resultado atual da coluna\n    const cell = document.createElement(\"td\"); // Nova célula para a linha de oscilação\n\n    if (resultado) {\n      const partes = resultado.split(\" \"); // Divide por espaço\n      const placar = partes[partes.length - 1]; // Obtém o último elemento (exemplo: \"2-1\")\n      const [golsTime1, golsTime2] = placar.split(\"-\").map(Number); // Converte em números\n\n      if (!isNaN(golsTime1) && !isNaN(golsTime2)) {\n        const totalGols = golsTime1 + golsTime2;\n        const isOver = totalGols > 2.5; // Verifica se o total de gols é maior que 2.5\n\n        if (isOver && porcentagem > 42) {\n          // Over com porcentagem Over -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem <= 42) {\n          // Under com porcentagem Under -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        } else if (isOver && porcentagem <= 42) {\n          // Over com porcentagem Under -> sobe\n          acumulado++; // Incrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem > 42) {\n          // Under com porcentagem Over -> desce\n          acumulado--; // Decrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        }\n      } else {\n        // Se houver erro na extração dos gols, mantemos o acumulado sem alteração\n        cell.innerText = acumulado;\n      }\n    } else {\n      // Caso não tenha resultado, mantém vazio\n      cell.innerText = \"\";\n    }\n\n    LinhaOscilacaoColunasPorcentagem.appendChild(cell);\n  });\n\n  tabela.insertBefore(\n    LinhaOscilacaoColunasPorcentagem,\n    tabela.querySelector(\"tr:nth-child(3)\")\n  );\n}\n\n\nfunction gerarTabela(\n  minutos,\n  mosaico,\n  resultadosMercados,\n  oscilacoesPorMercado\n) {\n  const tabelas = [\"tabelao25\", \"tabelaambas\"];\n\n  tabelas.forEach((mercadoTabela, tabelaIndex) => {\n    const mercado = tabelaIndex === 0 ? \"over25\" : \"ambas\";\n    const table = document.getElementById(mercadoTabela);\n    table.innerHTML = \"\";\n\n    const porcentagens = calcularPorcentagemColunas(\n      mosaico,\n      mercado,\n      resultadosMercados\n    );\n    const porcentagensBloco = calcularPorcentagemPorBlocos(porcentagens);\n\n    /* LINHA DE PORCENTAGEM DOS BLOCOS */\n    const porcentagemBloco = document.createElement(\"tr\");\n    const porcentagemCellBloco = document.createElement(\"td\");\n    porcentagemCellBloco.classList.add(\"percentCell\");\n    porcentagemCellBloco.innerText = \"%\";\n    porcentagemBloco.appendChild(porcentagemCellBloco);\n\n    for (let index = 0; index < porcentagensBloco.length; index++) {\n      const porcentagemCellsBloco = document.createElement(\"td\");\n      porcentagemCellsBloco.setAttribute(\"colspan\", \"5\");\n      porcentagemCellsBloco.innerText = `${porcentagensBloco[index]}%`;\n      porcentagemCellsBloco.classList.add(\"percentCell\");\n      porcentagemCellsBloco.classList.add(\n        porcentagensBloco[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemBloco.appendChild(porcentagemCellsBloco);\n    }\n\n    table.appendChild(porcentagemBloco);\n\n    /* LINHA DE PORCENTAGEM DASCOLUNAS */\n\n    const porcentagemRow = document.createElement(\"tr\");\n    const porcentagemCell = document.createElement(\"td\");\n    porcentagemCell.classList.add(\"percentCell\");\n    porcentagemCell.innerText = \"%\";\n    porcentagemRow.appendChild(porcentagemCell);\n\n    for (let index = 0; index < porcentagens.length; index++) {\n      const porcentagemCells = document.createElement(\"td\");\n      porcentagemCells.innerText = `${porcentagens[index]}%`;\n      porcentagemCells.classList.add(\"percentCell\");\n      porcentagemCells.classList.add(\n        porcentagens[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemRow.appendChild(porcentagemCells);\n    }\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaPorcentagens = document.createElement(\"td\");\n    mediaColunaPorcentagens.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaPorcentagens`\n    );\n    porcentagemRow.appendChild(mediaColunaPorcentagens);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaSubidas = document.createElement(\"td\");\n    mediaColunaSubidas.setAttribute(\"id\", `${mercadoTabela}mediaColunaSubidas`);\n    porcentagemRow.appendChild(mediaColunaSubidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesOver = document.createElement(\"td\");\n    mediaColunaLateralizacoesOver.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesOver`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesOver);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaDescidas = document.createElement(\"td\");\n    mediaColunaDescidas.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaDescidas`\n    );\n    porcentagemRow.appendChild(mediaColunaDescidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesUnder = document.createElement(\"td\");\n    mediaColunaLateralizacoesUnder.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesUnder`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesUnder);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaGols = document.createElement(\"td\");\n    mediaColunaGols.setAttribute(\"id\", `${mercadoTabela}mediaColunaGols`);\n    porcentagemRow.appendChild(mediaColunaGols);\n\n    table.appendChild(porcentagemRow);\n\n    const headerRow = document.createElement(\"tr\");\n    const headerCell = document.createElement(\"th\");\n    headerCell.innerText = \"Hora\";\n    headerRow.appendChild(headerCell);\n\n    minutos.forEach((minuto) => {\n      const th = document.createElement(\"th\");\n      th.innerText = `${minuto < 10 ? \"0\" + minuto : minuto}`;\n      headerRow.appendChild(th);\n    });\n\n    const icones = [\"％\", \"⬆️\", \"↔️\", \"⬇️\", \"⇆\", \"⚽\"];\n    icones.forEach((icone) => {\n      const th = document.createElement(\"th\");\n      th.innerText = icone;\n      headerRow.appendChild(th);\n    });\n\n    table.appendChild(headerRow);\n\n    // Linhas\n    mosaico.forEach((row, rowIndex) => {\n  const tableRow = document.createElement(\"tr\");\n  const hourCell = document.createElement(\"td\");\n  hourCell.innerText = row[0] < 10 ? `0${row[0]}` : row[0];\n  hourCell.classList.add(\"firstCollumn\");\n  tableRow.appendChild(hourCell);\n\n  let rodadaClasse = \"\"; // Classe que será aplicada à linha\n\n  // Adiciona células para os resultados\n  row.slice(1).forEach((value, colIndex) => {\n        const cell = document.createElement(\"td\");\n        cell.innerText = value || \"\";\n\n        // Cor para os mercados\n        const placar = value.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const time1 = parseInt(placar[1]);\n          const time2 = parseInt(placar[2]);\n          let rodadaClasse = \"\";\n          if (mercado === \"over25\") {\n            rodadaClasse = time1 + time2 > 2 ? \"green\" : \"red\";\n          } else if (mercado === \"ambas\") {\n            rodadaClasse = time1 > 0 && time2 > 0 ? \"green\" : \"red\";\n          }\n          if (rodadaClasse) {\n            cell.classList.add(rodadaClasse);\n          }\n        }\n\n        tableRow.appendChild(cell);\n      });\n\n  // Aplica a classe da rodada para toda a linha\n  if (rodadaClasse) {\n    tableRow.classList.add(rodadaClasse);\n  }\n\n  // Preenche células vazias se a linha não tiver o número total de minutos\n  const colunasRestantes = minutos.length - row.slice(1).length;\n  for (let i = 0; i < colunasRestantes; i++) {\n    const emptyCell = document.createElement(\"td\");\n    emptyCell.innerText = \"\";\n    tableRow.appendChild(emptyCell);\n  }\n\n  // Adiciona as colunas adicionais ao final da linha\n  const porcentagemMercadoCell = document.createElement(\"td\");\n  porcentagemMercadoCell.innerText = calcularPorcentagemLinha(\n    rowIndex,\n    resultadosMercados[mercado]\n  );\n  tableRow.appendChild(porcentagemMercadoCell);\n\n  const subidasCell = document.createElement(\"td\");\n  subidasCell.classList.add(\"subidasCell\");\n  subidasCell.innerText = calcularSubidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(subidasCell);\n\n  const lateralizacoesOverCell = document.createElement(\"td\");\n  lateralizacoesOverCell.classList.add(\"lateralizacoesOverCell\");\n  lateralizacoesOverCell.innerText = calcularLateralizacaoVerde(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesOverCell);\n\n  const descidasCell = document.createElement(\"td\");\n  descidasCell.classList.add(\"descidasCell\");\n  descidasCell.innerText = calcularDescidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(descidasCell);\n\n  const lateralizacoesUnderCell = document.createElement(\"td\");\n  lateralizacoesUnderCell.classList.add(\"lateralizacoesUnderCell\");\n  lateralizacoesUnderCell.innerText = calcularLateralizacaoVermelho(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesUnderCell);\n\n  const golsCell = document.createElement(\"td\");\n  golsCell.classList.add(\"golsCell\");\n  golsCell.innerText = calcularGolsLinha(row);\n  tableRow.appendChild(golsCell);\n\n  table.appendChild(tableRow);\n});\n\n\n    calcularMediaPorcetagensLinhas(mercadoTabela);\n    calcularMediaSubidas(mercadoTabela);\n    calcularMediaLateralizacaoOver(mercadoTabela);\n    calcularMediaDescidas(mercadoTabela);\n    calcularMediaLateralizacoesUnder(mercadoTabela);\n    calcularMediaGols(mercadoTabela);\n    adicionarLinhaSomaGols(mercadoTabela, mosaico);\n    adicionarLinhaOscilacaoColunas(mercadoTabela, mosaico);\n  });\n\n  ativarDestaquePontos();\n}\n\n// Funções auxiliares\nfunction calcularPorcentagemLinha(rowIndex, resultadosMercado) {\n  const total = resultadosMercado[rowIndex].slice(1).length;\n  const ocorrencias = resultadosMercado[rowIndex]\n    .slice(1)\n    .filter(Boolean).length;\n  return `${Math.round((ocorrencias / total) * 100)}%`;\n}\n\nfunction calcularSubidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    false\n  );\n}\n\nfunction calcularDescidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVerde(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVermelho(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    false\n  );\n}\n\n// function calcularLateralizacoesLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado) {\n//     return calcularMovimentosLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado, mercadoComparado);\n// }\n\n\nfunction calcularGolsLinha(row) {\n  return row.slice(1).reduce((total, value) => {\n    // Extrai os placares usando uma expressão regular\n    const placares = value.match(/(\\d+)-(\\d+)/);\n    if (placares) {\n      const golsTime1 = parseInt(placares[1]);\n      const golsTime2 = parseInt(placares[2]);\n      return total + golsTime1 + golsTime2;\n    } else {\n      return total; // Retorna o total inalterado se não houver placares correspondentes\n    }\n  }, 0);\n}\n\n\n\n\nfunction calcularMovimentosLinha(\n  rowIndex,\n  resultadosMercados,\n  mercado,\n  condicao1,\n  condicao2\n) {\n  let contador = 0;\n  const currentRow = resultadosMercados[mercado][rowIndex];\n  const nextRow = resultadosMercados[mercado][rowIndex + 1];\n\n  if (!nextRow) return contador;\n\n  currentRow.slice(1).forEach((result, colIndex) => {\n    const nextResult = nextRow[colIndex + 1];\n    if (result === condicao1 && nextResult === condicao2) {\n      contador++;\n    }\n  });\n\n  return contador;\n}\n\nfunction gerarDadosContagem(resultados) {\n  console.log(resultados);\n}\n\nfunction calcularOscilacaoPorMercado(mosaico, resultadosMercados) {\n  return [...mercadosUnderOver, ...mercadosAmbas].map((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1);\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1);\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0;\n        } else {\n          acumulado += result ? 1 : -1;\n        }\n        oscilacoes.push(acumulado);\n      });\n    }\n\n    return {\n      mercado,\n      oscilacoes,\n    };\n  });\n}\n\nfunction gerarLabelsHoraMaisMinuto(minutos, mosaico) {\n  const labels = [];\n\n  for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n    const currentRow = mosaico[rowIndex].slice(1);\n    const hora = mosaico[rowIndex][0];\n\n    for (let label = 0; label < currentRow.length; label++) {\n      labels.push(\n        `${hora < 10 ? \"0\" + hora : hora}:${\n          minutos[label] < 10 ? \"0\" + minutos[label] : minutos[label]\n        }`\n      );\n    }\n  }\n\n  return labels;\n}\n\nfunction ativarDestaquePontos() {\n  const cellsWithPoints = document.querySelectorAll(\"td span.pontosGraficos\");\n\n  cellsWithPoints.forEach((span) => {\n    span.addEventListener(\"click\", function () {\n      const ponto = this.innerText; // Ponto do span clicado\n      const isHighlighted = this.parentElement.classList.contains(\"highlight\"); // Verifica se já está destacado\n\n      if (isHighlighted) {\n        // Remove o destaque de todas as células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.remove(\"highlight\");\n          }\n        });\n      } else {\n        // Remove os destaques globais\n        document.querySelectorAll(\".highlight\").forEach((el) => {\n          el.classList.remove(\"highlight\");\n        });\n\n        // Adiciona o destaque nas células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.add(\"highlight\");\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto) {\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosUnderOver,\n    \"graficoUnderOver\",\n    \"controlesUnderOver\",\n    labelsHoraMaisMinuto\n  );\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosAmbas,\n    \"graficoAmbas\",\n    \"controlesAmbas\",\n    labelsHoraMaisMinuto\n  );\n}\n\nfunction geraGraficosPorCategoria(\n  dadosOscilacao,\n  mercadosIniciais,\n  canvasId,\n  controlesId,\n  labels\n) {\n  const ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n  if (canvasId === \"graficoUnderOver\" && chartUnderOver) {\n    chartUnderOver.destroy();\n    chartUnderOver = null;\n  } else if (canvasId === \"graficoAmbas\" && chartAmbas) {\n    chartAmbas.destroy();\n    chartAmbas = null;\n  }\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosIniciais.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 3.5,\n      pointHoverRadius: 4,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  const data = {\n    labels,\n    datasets,\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return ` ${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"HorÃ¡rio\",\n        },\n        ticks: {\n          maxRotation: 0,\n          autoSkip: true,\n          stepSize: 5,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Valores Acumulados\",\n        },\n      },\n    },\n  };\n\n  const chart = new Chart(ctx, {\n    type: \"line\",\n    data: data,\n    options: options,\n  });\n\n  if (canvasId === \"graficoUnderOver\") {\n    chartUnderOver = chart;\n  } else if (canvasId === \"graficoAmbas\") {\n    chartAmbas = chart;\n  }\n\n  configurarControleDeMercados(\n    dadosOscilacao,\n    mercadosIniciais,\n    chart,\n    controlesId\n  );\n}\n\nfunction configurarControleDeMercados(\n  dadosOscilacao,\n  mercadosIniciais,\n  chart,\n  controlesId\n) {\n  const controlesContainer = document.getElementById(controlesId);\n  controlesContainer.innerHTML = \"\";\n\n  dadosOscilacao.forEach((dados) => {\n    const mercado = dados.mercado;\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = `mercado-${mercado}-${controlesId}`;\n    checkbox.checked = mercadosIniciais.includes(mercado);\n\n    const label = document.createElement(\"label\");\n    label.htmlFor = `mercado-${mercado}-${controlesId}`;\n    label.textContent = mercado.toUpperCase();\n\n    checkbox.addEventListener(\"change\", () => {\n      atualizarGrafico(dadosOscilacao, chart, controlesId);\n    });\n\n    const container = document.createElement(\"div\");\n    container.style.marginRight = \"10px\";\n    container.style.display = \"inline-block\";\n    container.appendChild(checkbox);\n    container.appendChild(label);\n    controlesContainer.appendChild(container);\n  });\n}\n\nfunction atualizarGrafico(dadosOscilacao, chart, controlesId) {\n  const mercadosSelecionados = Array.from(\n    document.querySelectorAll(`#${controlesId} input:checked`)\n  ).map((input) =>\n    input.id.replace(`mercado-`, \"\").replace(`-${controlesId}`, \"\")\n  );\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosSelecionados.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  chart.data.datasets = datasets;\n  chart.update();\n}\n\n\n\nreturn (_ctx, _cache) => {\n  const _component_PrimeTextarea = __nuxt_component_0\n  const _component_PrimeDropdown = __nuxt_component_1\n  const _component_PrimeButton = __nuxt_component_2\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _hoisted_3,\n      _createElementVNode(\"div\", _hoisted_4, [\n        _hoisted_5,\n        _createVNode(_component_PrimeTextarea, {\n          modelValue: dadosAnalise.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((dadosAnalise).value = $event)),\n          placeholder: \"Insira os dados\",\n          class: \"w-full\",\n          rows: \"4\"\n        }, null, 8, [\"modelValue\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createVNode(_component_PrimeDropdown, {\n            modelValue: campeonatoSelecionado.value,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((campeonatoSelecionado).value = $event)),\n            options: campeonatos.value,\n            \"option-label\": \"label\",\n            \"option-value\": \"value\",\n            placeholder: \"Selecione um campeonato\",\n            class: \"w-full\"\n          }, null, 8, [\"modelValue\", \"options\"])\n        ]),\n        _createVNode(_component_PrimeButton, {\n          label: \"Analisar\",\n          severity: \"success\",\n          class: \"w-full\",\n          onClick: onClickAnalisar\n        })\n      ])\n    ]),\n    (showRanks.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rankings.value, (rank, index) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: index,\n              class: \"bg-white shadow-lg rounded-xl p-2\"\n            }, [\n              _createElementVNode(\"h2\", _hoisted_9, _toDisplayString(rank.title), 1),\n              _createElementVNode(\"table\", _hoisted_10, [\n                _hoisted_11,\n                _createElementVNode(\"tbody\", null, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rank.data, (team, i) => {\n                    return (_openBlock(), _createElementBlock(\"tr\", {\n                      key: team.team,\n                      class: \"odd:bg-gray-50 even:bg-white\"\n                    }, [\n                      _createElementVNode(\"td\", _hoisted_12, _toDisplayString(i + 1), 1),\n                      _createElementVNode(\"td\", _hoisted_13, _toDisplayString(team.team), 1),\n                      _createElementVNode(\"td\", _hoisted_14, _toDisplayString(team.value), 1)\n                    ]))\n                  }), 128))\n                ])\n              ])\n            ]))\n          }), 128))\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_15, [\n      _createElementVNode(\"div\", null, [\n        _hoisted_16,\n        _hoisted_17,\n        _createElementVNode(\"div\", _hoisted_18, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[2] || (_cache[2] = $event => (showTable1.value = !showTable1.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_19, null, 512), [\n            [_vShow, showTable1.value]\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", null, [\n        _hoisted_20,\n        _hoisted_21,\n        _createElementVNode(\"div\", _hoisted_22, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[3] || (_cache[3] = $event => (showTable2.value = !showTable2.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_23, null, 512), [\n            [_vShow, showTable2.value]\n          ])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1742846401232,
      "end": 1742846401232,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "result": "import { default as __nuxt_component_0 } from \"primevue/textarea\";\nimport { default as __nuxt_component_1 } from \"primevue/dropdown\";\nimport { default as __nuxt_component_2 } from \"primevue/button\";\nimport { definePageMeta } from '/Users/leonardohumbert/Downloads/sistema-futebol-online/nuxt/node_modules/nuxt/dist/pages/runtime/composables';\nimport { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-auto h-auto\" }\nconst _hoisted_2 = { class: \"max-w-2xl mx-auto mb-5\" }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", { class: \"text-2xl font-bold text-center mb-4 text-blue-500\" }, \" Ferramenta BBTips \", -1)\nconst _hoisted_4 = { class: \"mb-4\" }\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"block text-gray-700 font-medium mb-2\" }, \"Dados para Análise\", -1)\nconst _hoisted_6 = { class: \"flex gap-4\" }\nconst _hoisted_7 = { class: \"w-1/2\" }\nconst _hoisted_8 = {\n  key: 0,\n  class: \"grid grid-cols-1 md:grid-cols-3 gap-6 p-5\"\n}\nconst _hoisted_9 = { class: \"text-lg font-semibold text-gray-700 text-center mb-4\" }\nconst _hoisted_10 = { class: \"w-full border-collapse border border-gray-300\" }\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"thead\", null, [\n  /*#__PURE__*/_createElementVNode(\"tr\", { class: \"bg-gray-100\" }, [\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"#\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Time\"),\n    /*#__PURE__*/_createElementVNode(\"th\", { class: \"border border-gray-300 px-2 py-2\" }, \"Valor\")\n  ])\n], -1)\nconst _hoisted_12 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_13 = { class: \"border border-gray-300 px-2 py-2\" }\nconst _hoisted_14 = { class: \"border border-gray-300 px-2 py-2 text-center\" }\nconst _hoisted_15 = { id: \"graficos\" }\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesUnderOver\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoUnderOver\" }, null, -1)\nconst _hoisted_18 = { class: \"table\" }\nconst _hoisted_19 = { id: \"tabelao25\" }\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"controlesAmbas\",\n  style: {\"margin-bottom\":\"20px\"}\n}, null, -1)\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"canvas\", { id: \"graficoAmbas\" }, null, -1)\nconst _hoisted_22 = { class: \"table\" }\nconst _hoisted_23 = { id: \"tabelaambas\" }\n\nimport { ref } from \"vue\";\nimport { Chart } from \"chart.js\";\n\nconst _sfc_main = {\n  __name: 'home',\n  setup(__props) {\n\nconst dadosAnalise = ref(\"\");\nconst showRanks = ref(false);\nconst campeonatoSelecionado = ref(null);\nconst showTable1 = ref(true);\nconst showTable2 = ref(true);\nconst rankings = ref([]);\nconst campeonatos = ref([\n  { label: \"Copa\", value: \"copa\" },\n  { label: \"Euro\", value: \"euro\" },\n  { label: \"Super\", value: \"super\" },\n  { label: \"Premier\", value: \"premier\" },\n]);\n\nfunction extrairGols(partida) {\n  const placar = partida.match(/(\\d+)-(\\d+)/);\n  if (placar) {\n    return parseInt(placar[1]) + parseInt(placar[2]);\n  }\n  return 0;\n}\nconst calculateChamaGol = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const golsPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!golsPorTime[partida.team]) {\n        golsPorTime[partida.team] = [];\n      }\n      golsPorTime[partida.team].push(partida.goals);\n    });\n  });\n\n  const medias = Object.entries(golsPorTime).map(([time, gols]) => {\n    const soma = gols.reduce((acc, gol) => acc + gol, 0);\n    return { team: time, value: (soma / gols.length).toFixed(2) };\n  });\n\n  return medias.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\nconst calculateMaximaMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0] };\n    })\n  );\n\n  const medias = resultados.flat().map((partida) => {\n    const streak = Math.floor(Math.random() * 6);\n    const avg = (streak + Math.random() * 5).toFixed(2);\n    return { team: partida.team, value: `${streak} / ${avg}` };\n  });\n\n  return medias\n    .sort((a, b) => b.value.split(\" / \")[1] - a.value.split(\" / \")[1])\n    .slice(0, 5);\n};\n\nconst calculateAncoraMercado = (matches) => {\n  const resultados = matches.map((rodada) =>\n    rodada.slice(1).map((partida) => {\n      const times = partida.split(\" x \");\n      return { team: times[0], goals: extrairGols(partida) };\n    })\n  );\n\n  const pontosPorTime = {};\n  resultados.forEach((rodada) => {\n    rodada.forEach((partida) => {\n      if (!pontosPorTime[partida.team]) {\n        pontosPorTime[partida.team] = 0;\n      }\n      pontosPorTime[partida.team] += partida.goals >= 5 ? 1 : 0;\n    });\n  });\n\n  const pontos = Object.entries(pontosPorTime).map(([time, pontos]) => ({\n    team: time,\n    value: pontos,\n  }));\n\n  return pontos.sort((a, b) => b.value - a.value).slice(0, 5);\n};\n\n false && /*@__PURE__*/ definePageMeta({\n  layout: \"home\",\n  middleware: [],\n});\n\nconst handleFileUpload = (event) => {\n  console.log(\"Arquivo selecionado:\", event.files);\n};\n\n// Função dos graficos\n\nconst onClickAnalisar = () => {\n  const resultadoAnalise = document.getElementById(\"graficos\");\n  showRanks.value = true;\n  if (!resultadoAnalise) {\n    console.error(\"Elemento #graficos não encontrado.\");\n    return;\n  }\n\n  resultadoAnalise.style.display = \"block\";\n  gerarTabelaEGraficos();\n};\n\nlet chartUnderOver = null;\nlet chartAmbas = null;\n\n\n// for (let index = 0; index < tables.length; index++) {\n//   buttons[index].addEventListener(\"click\", () => {\n//     mostrarEsconderTabela(tables[index]);\n//   });\n// }\n\nconst mercadosUnderOver = [\"under25\", \"over25\"];\nconst mercadosAmbas = [\"ambasNao\", \"ambas\"];\n\nconst todasCores = {\n  under25: \"#f53246\",\n  over25: \"#6bf58b\",\n  ambas: \"#6bf58b\",\n  ambasNao: \"#f53246\",\n};\n\nfunction gerarTabelaEGraficos() {\n  dadosAnalise.value = dadosAnalise.value.replace(/\\r?\\n|\\r/g, ' ').replace(/\\s{2,}/g, ' ');\n\n  const dataInput = dadosAnalise.value.trim();\n  if (!dataInput) return;\n\n  const liga = campeonatoSelecionado.value;\n  const minutos = gerarMinutosPorLiga(liga);\n  const mosaico = sanitizarDados(dataInput);\n  rankings.value = [\n  { title: \"Chama Gol\", data: calculateChamaGol(mosaico) },\n  { title: \"Máxima de Mercado\", data: calculateMaximaMercado(mosaico) },\n  { title: \"Âncora de Mercado\", data: calculateAncoraMercado(mosaico) },\n];\n  const resultadosMercados = {};\n  [...mercadosUnderOver, ...mercadosAmbas].forEach((mercado) => {\n    resultadosMercados[mercado] = verificarResultadosMercado(mosaico, mercado);\n  });\n\n  const oscilacoesPorMercado = calcularOscilacaoPorMercadoEspecifico(\n    resultadosMercados,\n    [\"over25\", \"ambas\"]\n  );\n\n  gerarTabela(minutos, mosaico, resultadosMercados, oscilacoesPorMercado);\n\n  // gerarTabela(minutos, mosaico, resultadosMercados);\n\n  const dadosOscilacao = calcularOscilacaoPorMercado(\n    mosaico,\n    resultadosMercados\n  );\n\n  const labelsHoraMaisMinuto = gerarLabelsHoraMaisMinuto(minutos, mosaico);\n\n  gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto);\n}\n\nfunction gerarMinutosPorLiga(liga) {\n  switch (liga) {\n    case \"copa\":\n    case \"super\":\n      return Array.from({ length: 20 }, (_, i) => 1 + i * 3);\n    case \"euro\":\n      return Array.from({ length: 20 }, (_, i) => 2 + i * 3);\n    case \"premier\":\n      return Array.from({ length: 20 }, (_, i) => i * 3);\n    default:\n      return [];\n  }\n}\n\nfunction sanitizarDados(data) {\n  return data.split(\"\\n\").map((row, rowIndex) => {\n    const columns = row.trim().split(/\\t+/); // Divide usando tabulação como separador principal\n    const hora = columns.shift(); // A primeira coluna é sempre a hora\n\n    if (!hora || isNaN(hora)) {\n      console.warn(`Hora inválida na linha ${rowIndex}: ${hora}`);\n    }\n\n    const jogosSanitizados = columns.map((jogo) => {\n      return jogo.replace(\"+\", \"\").trim(); // Remove qualquer \"+\" dos dados\n    });\n\n    return [hora, ...jogosSanitizados];\n  });\n}\n\n\nfunction verificarResultadosMercado(mosaico, mercado) {\n  return mosaico.map((row) => {\n    const hora = row[0]; // Mantemos a hora na primeira posição\n    const resultados = row.slice(1).map((jogo) => {\n      if (!jogo) return false;\n\n      // Extrai os números do placar corretamente\n      const placarMatch = jogo.match(/(\\d+)-(\\d+)$/);\n      if (!placarMatch) return false;\n\n      const time1 = parseInt(placarMatch[1], 10);\n      const time2 = parseInt(placarMatch[2], 10);\n\n      switch (mercado) {\n        case \"under25\":\n          return time1 + time2 < 2.5;\n        case \"over25\":\n          return time1 + time2 >= 2.5;\n        case \"ambas\":\n          return time1 > 0 && time2 > 0;\n        case \"ambasNao\":\n          return !(time1 > 0 && time2 > 0);\n        default:\n          return false;\n      }\n    });\n\n    return [hora, ...resultados];\n  });\n}\n\nfunction calcularOscilacaoPorMercadoEspecifico(resultadosMercados, mercadosAlvo) {\n  const oscilacoesMercado = {};\n\n  mercadosAlvo.forEach((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = resultadosMercados[mercado].length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1); // Ignorar a hora\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1); // Ignorar a hora\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0; // Sem mudança\n        } else {\n          acumulado += result ? 1 : -1; // Incremento ou decremento\n        }\n\n        if (!oscilacoes[rowIndex]) oscilacoes[rowIndex] = [];\n        oscilacoes[rowIndex][colIndex] = acumulado; // Armazena a oscilação\n      });\n    }\n\n    oscilacoesMercado[mercado] = oscilacoes;\n  });\n\n  return oscilacoesMercado;\n}\n\n\nfunction gerarContagensTabela(resultadosMercados, tabelas) {\n  tabelas.forEach((mercadoTabela) => {\n    const table = document.getElementById(mercadoTabela);\n    const linhas = table.querySelectorAll(\"tr\");\n\n    linhas.forEach((linha, rowIndex) => {\n      // Ignora o cabeçalho\n      if (rowIndex === 0) return;\n\n      // Obtém as células da linha atual\n      const cells = linha.querySelectorAll(\"td\");\n      const hora = cells[0].innerText;\n\n      let overCount = 0;\n      let subidaCount = 0;\n      let lateralOverCount = 0;\n      let descidaCount = 0;\n      let lateralUnderCount = 0;\n\n      // Faz as contagens com base nos resultadosMercados\n      for (let colIndex = 1; colIndex < cells.length - 5; colIndex++) {\n        const atualOver = resultadosMercados.over25[rowIndex - 1]?.[colIndex];\n        const anteriorOver = resultadosMercados.over25[rowIndex]?.[colIndex];\n        const atualAmbas = resultadosMercados.ambas[rowIndex - 1]?.[colIndex];\n        const anteriorAmbas = resultadosMercados.ambas[rowIndex]?.[colIndex];\n\n        // Porcentagem over\n        if (atualOver) overCount++;\n\n        // Subidas: Over25 em cima de Under25\n        if (atualOver && !anteriorOver) subidaCount++;\n\n        // Lateralizações Over25: Over25 em cima de Over25\n        if (atualOver && anteriorOver) lateralOverCount++;\n\n        // Descidas: Under25 em cima de Over25\n        if (!atualOver && anteriorOver) descidaCount++;\n\n        // Lateralizações Under25: Under25 em cima de Under25\n        if (!atualOver && !anteriorOver) lateralUnderCount++;\n      }\n\n      // Atualiza as células extras para contagens\n      const porcentagemCell = cells[cells.length - 5];\n      porcentagemCell.innerText = `${(\n        (overCount / (cells.length - 6)) *\n        100\n      ).toFixed(0)}%`;\n\n      const subidaCell = cells[cells.length - 4];\n      subidaCell.innerText = subidaCount;\n\n      const lateralOverCell = cells[cells.length - 3];\n      lateralOverCell.innerText = lateralOverCount;\n\n      const descidaCell = cells[cells.length - 2];\n      descidaCell.innerText = descidaCount;\n\n      const lateralUnderCell = cells[cells.length - 1];\n      lateralUnderCell.innerText = lateralUnderCount;\n    });\n  });\n}\n\nfunction calcularPorcentagemColunas(mosaico, mercado, resultadosMercados) {\n  const porcentagens = [];\n  const totalLinhas = mosaico.length - 1;\n\n  for (let colIndex = 1; colIndex <= 20; colIndex++) {\n    let count = 0;\n\n    for (let rowIndex = 1; rowIndex < mosaico.length; rowIndex++) {\n      if (\n        resultadosMercados[mercado] &&\n        resultadosMercados[mercado][rowIndex]\n      ) {\n        const result = resultadosMercados[mercado][rowIndex][colIndex];\n        if (result) {\n          count++;\n        }\n      }\n    }\n    const porcentagem =\n      totalLinhas > 0 ? ((count / totalLinhas) * 100).toFixed(0) : 0;\n    porcentagens.push(porcentagem);\n  }\n\n  return porcentagens;\n}\n\nfunction calcularPorcentagemPorBlocos(porcentagens) {\n  const blocos = [];\n  let soma = 0;\n\n  porcentagens.forEach((porcentagem, index) => {\n    soma += parseInt(porcentagem, 10); // Garante que seja tratado como número\n    if ((index + 1) % 5 === 0) {\n      // A cada 5 colunas, adiciona ao bloco\n      blocos.push(soma / 5); // Calcula a média\n      soma = 0; // Reseta a soma para o próximo bloco\n    }\n  });\n\n  return blocos;\n}\n\nfunction calcularMediaPorcetagensLinhas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = tabela.querySelectorAll(\"tr\");\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 1) {\n      const celulaPorcentagem = linha.querySelector(\"td:nth-last-child(6)\");\n      if (celulaPorcentagem) {\n        const valor = parseInt(\n          celulaPorcentagem.innerText.replace(\"%\", \"\").trim(),\n          10\n        );\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / contador).toFixed(2))}%` : 0;\n\n  const mediaColunaPorcentagens = document.getElementById(\n    `${tabelaId}mediaColunaPorcentagens`\n  );\n  mediaColunaPorcentagens.innerText = media;\n}\n\nfunction calcularMediaSubidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"subidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaSubidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacaoOver(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesOverCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesOver`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaDescidas(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByClassName(\"descidasCell\"));\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaDescidas`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaLateralizacoesUnder(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(\n    tabela.getElementsByClassName(\"lateralizacoesUnderCell\")\n  );\n  let soma = 0;\n  let contador = 0;\n\n  linhas.forEach((linha, index) => {\n    if (index > 0) {\n      const celulaSubida = linha.innerText;\n      if (celulaSubida) {\n        const valor = parseInt(celulaSubida.trim(), 10);\n\n        if (!isNaN(valor)) {\n          soma += valor;\n          contador++;\n        }\n      }\n    }\n  });\n\n  const media =\n    contador > 0 ? `${Math.ceil((soma / (contador - 1)).toFixed(2))}` : 0;\n\n  const mediaColunaSubidas = document.getElementById(\n    `${tabelaId}mediaColunaLateralizacoesUnder`\n  );\n  mediaColunaSubidas.innerText = media;\n}\n\nfunction calcularMediaGols(tabelaId) {\n  const tabela = document.getElementById(tabelaId);\n  const linhas = Array.from(tabela.getElementsByTagName(\"tr\")); // Pega todas as linhas da tabela\n  let soma = 0;\n  let contador = 0;\n\n  // Itera sobre as linhas, pulando o cabeçalho e a soma de gols\n  for (let i = 1; i < linhas.length - 1; i++) {\n    const celulaGols = linhas[i].querySelector(\".golsCell\"); // Pega a célula de gols da linha\n\n    if (celulaGols) {\n      const valor = parseInt(celulaGols.innerText.trim(), 10);\n\n      if (!isNaN(valor)) {\n        soma += valor;\n        contador++;\n      }\n    }\n  }\n\n  const media = contador > 0 ? `${Math.ceil(soma / contador)}` : 0;\n\n  const mediaColunaGols = document.getElementById(\n    `${tabelaId}mediaColunaGols`\n  );\n  mediaColunaGols.innerText = media;\n}\n\nfunction adicionarLinhaSomaGols(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  if (!mosaico || mosaico.length === 0) {\n    console.warn(\"O mosaico está vazio.\");\n    return;\n  }\n\n  const numColunas = mosaico[0].length - 1; // Número de colunas de resultados\n  const somaGolsPorColuna = Array(numColunas).fill(0);\n\n  mosaico.forEach((row, rowIndex) => {\n    if (rowIndex > 0) {\n      row.slice(1).forEach((cell, colIndex) => {\n        const placar = cell.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const golsTime1 = parseInt(placar[1]);\n          const golsTime2 = parseInt(placar[2]);\n          somaGolsPorColuna[colIndex] += golsTime1 + golsTime2;\n        }\n      });\n    }\n  });\n\n  const linhaSoma = document.createElement(\"tr\");\n  const headerCell = document.createElement(\"td\");\n  headerCell.innerText = \"⚽\";\n  linhaSoma.appendChild(headerCell);\n\n  somaGolsPorColuna.forEach((soma) => {\n    const cell = document.createElement(\"td\");\n    cell.innerText = soma || 0;\n    cell.classList.add(\"somaGolsCell\");\n    linhaSoma.appendChild(cell);\n  });\n\n  const colunasExtras = 6;\n  for (let i = 0; i < colunasExtras; i++) {\n    const emptyCell = document.createElement(\"td\");\n    linhaSoma.appendChild(emptyCell);\n  }\n\n  tabela.insertBefore(linhaSoma, tabela.querySelector(\"tr:nth-child(3)\"));\n}\nfunction adicionarLinhaOscilacaoColunas(tabelaId, mosaico) {\n  const tabela = document.getElementById(tabelaId);\n\n  // Cria uma nova linha para a oscilação\n  const LinhaOscilacaoColunasPorcentagem = document.createElement(\"tr\");\n  const LinhaOscilacaoColunasPorcentagemIcone = document.createElement(\"td\");\n  LinhaOscilacaoColunasPorcentagemIcone.innerHTML = \"📈\"; // Ícone de gráfico\n  LinhaOscilacaoColunasPorcentagem.appendChild(LinhaOscilacaoColunasPorcentagemIcone);\n\n  // Insere a linha logo abaixo da linha de porcentagens\n  const linhas = tabela.getElementsByTagName(\"tr\");\n  const porcentagens = Array.from(linhas[1].querySelectorAll(\"td\")).slice(1); // Obtém porcentagens da linha\n  const resultados = mosaico[0].slice(1); // Obtém os resultados da primeira linha do mosaico\n\n  let acumulado = 0; // Variável para acumular os valores de oscilação\n\n  porcentagens.forEach((porcentagemCelula, index) => {\n    const porcentagem = parseFloat(porcentagemCelula.innerText.replace(\"%\", \"\").trim()); // Obtém a porcentagem como número\n    const resultado = resultados[index]; // Resultado atual da coluna\n    const cell = document.createElement(\"td\"); // Nova célula para a linha de oscilação\n\n    if (resultado) {\n      const partes = resultado.split(\" \"); // Divide por espaço\n      const placar = partes[partes.length - 1]; // Obtém o último elemento (exemplo: \"2-1\")\n      const [golsTime1, golsTime2] = placar.split(\"-\").map(Number); // Converte em números\n\n      if (!isNaN(golsTime1) && !isNaN(golsTime2)) {\n        const totalGols = golsTime1 + golsTime2;\n        const isOver = totalGols > 2.5; // Verifica se o total de gols é maior que 2.5\n\n        if (isOver && porcentagem > 42) {\n          // Over com porcentagem Over -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem <= 42) {\n          // Under com porcentagem Under -> lateraliza\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        } else if (isOver && porcentagem <= 42) {\n          // Over com porcentagem Under -> sobe\n          acumulado++; // Incrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"green\");\n        } else if (!isOver && porcentagem > 42) {\n          // Under com porcentagem Over -> desce\n          acumulado--; // Decrementa acumulado\n          cell.innerText = acumulado;\n          cell.classList.add(\"red\");\n        }\n      } else {\n        // Se houver erro na extração dos gols, mantemos o acumulado sem alteração\n        cell.innerText = acumulado;\n      }\n    } else {\n      // Caso não tenha resultado, mantém vazio\n      cell.innerText = \"\";\n    }\n\n    LinhaOscilacaoColunasPorcentagem.appendChild(cell);\n  });\n\n  tabela.insertBefore(\n    LinhaOscilacaoColunasPorcentagem,\n    tabela.querySelector(\"tr:nth-child(3)\")\n  );\n}\n\n\nfunction gerarTabela(\n  minutos,\n  mosaico,\n  resultadosMercados,\n  oscilacoesPorMercado\n) {\n  const tabelas = [\"tabelao25\", \"tabelaambas\"];\n\n  tabelas.forEach((mercadoTabela, tabelaIndex) => {\n    const mercado = tabelaIndex === 0 ? \"over25\" : \"ambas\";\n    const table = document.getElementById(mercadoTabela);\n    table.innerHTML = \"\";\n\n    const porcentagens = calcularPorcentagemColunas(\n      mosaico,\n      mercado,\n      resultadosMercados\n    );\n    const porcentagensBloco = calcularPorcentagemPorBlocos(porcentagens);\n\n    /* LINHA DE PORCENTAGEM DOS BLOCOS */\n    const porcentagemBloco = document.createElement(\"tr\");\n    const porcentagemCellBloco = document.createElement(\"td\");\n    porcentagemCellBloco.classList.add(\"percentCell\");\n    porcentagemCellBloco.innerText = \"%\";\n    porcentagemBloco.appendChild(porcentagemCellBloco);\n\n    for (let index = 0; index < porcentagensBloco.length; index++) {\n      const porcentagemCellsBloco = document.createElement(\"td\");\n      porcentagemCellsBloco.setAttribute(\"colspan\", \"5\");\n      porcentagemCellsBloco.innerText = `${porcentagensBloco[index]}%`;\n      porcentagemCellsBloco.classList.add(\"percentCell\");\n      porcentagemCellsBloco.classList.add(\n        porcentagensBloco[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemBloco.appendChild(porcentagemCellsBloco);\n    }\n\n    table.appendChild(porcentagemBloco);\n\n    /* LINHA DE PORCENTAGEM DASCOLUNAS */\n\n    const porcentagemRow = document.createElement(\"tr\");\n    const porcentagemCell = document.createElement(\"td\");\n    porcentagemCell.classList.add(\"percentCell\");\n    porcentagemCell.innerText = \"%\";\n    porcentagemRow.appendChild(porcentagemCell);\n\n    for (let index = 0; index < porcentagens.length; index++) {\n      const porcentagemCells = document.createElement(\"td\");\n      porcentagemCells.innerText = `${porcentagens[index]}%`;\n      porcentagemCells.classList.add(\"percentCell\");\n      porcentagemCells.classList.add(\n        porcentagens[index] > 42 ? \"text-green\" : \"text-red\"\n      );\n      porcentagemRow.appendChild(porcentagemCells);\n    }\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaPorcentagens = document.createElement(\"td\");\n    mediaColunaPorcentagens.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaPorcentagens`\n    );\n    porcentagemRow.appendChild(mediaColunaPorcentagens);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaSubidas = document.createElement(\"td\");\n    mediaColunaSubidas.setAttribute(\"id\", `${mercadoTabela}mediaColunaSubidas`);\n    porcentagemRow.appendChild(mediaColunaSubidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesOver = document.createElement(\"td\");\n    mediaColunaLateralizacoesOver.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesOver`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesOver);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaDescidas = document.createElement(\"td\");\n    mediaColunaDescidas.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaDescidas`\n    );\n    porcentagemRow.appendChild(mediaColunaDescidas);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaLateralizacoesUnder = document.createElement(\"td\");\n    mediaColunaLateralizacoesUnder.setAttribute(\n      \"id\",\n      `${mercadoTabela}mediaColunaLateralizacoesUnder`\n    );\n    porcentagemRow.appendChild(mediaColunaLateralizacoesUnder);\n\n    table.appendChild(porcentagemRow);\n\n    const mediaColunaGols = document.createElement(\"td\");\n    mediaColunaGols.setAttribute(\"id\", `${mercadoTabela}mediaColunaGols`);\n    porcentagemRow.appendChild(mediaColunaGols);\n\n    table.appendChild(porcentagemRow);\n\n    const headerRow = document.createElement(\"tr\");\n    const headerCell = document.createElement(\"th\");\n    headerCell.innerText = \"Hora\";\n    headerRow.appendChild(headerCell);\n\n    minutos.forEach((minuto) => {\n      const th = document.createElement(\"th\");\n      th.innerText = `${minuto < 10 ? \"0\" + minuto : minuto}`;\n      headerRow.appendChild(th);\n    });\n\n    const icones = [\"％\", \"⬆️\", \"↔️\", \"⬇️\", \"⇆\", \"⚽\"];\n    icones.forEach((icone) => {\n      const th = document.createElement(\"th\");\n      th.innerText = icone;\n      headerRow.appendChild(th);\n    });\n\n    table.appendChild(headerRow);\n\n    // Linhas\n    mosaico.forEach((row, rowIndex) => {\n  const tableRow = document.createElement(\"tr\");\n  const hourCell = document.createElement(\"td\");\n  hourCell.innerText = row[0] < 10 ? `0${row[0]}` : row[0];\n  hourCell.classList.add(\"firstCollumn\");\n  tableRow.appendChild(hourCell);\n\n  let rodadaClasse = \"\"; // Classe que será aplicada à linha\n\n  // Adiciona células para os resultados\n  row.slice(1).forEach((value, colIndex) => {\n        const cell = document.createElement(\"td\");\n        cell.innerText = value || \"\";\n\n        // Cor para os mercados\n        const placar = value.match(/(\\d+)-(\\d+)/);\n        if (placar) {\n          const time1 = parseInt(placar[1]);\n          const time2 = parseInt(placar[2]);\n          let rodadaClasse = \"\";\n          if (mercado === \"over25\") {\n            rodadaClasse = time1 + time2 > 2 ? \"green\" : \"red\";\n          } else if (mercado === \"ambas\") {\n            rodadaClasse = time1 > 0 && time2 > 0 ? \"green\" : \"red\";\n          }\n          if (rodadaClasse) {\n            cell.classList.add(rodadaClasse);\n          }\n        }\n\n        tableRow.appendChild(cell);\n      });\n\n  // Aplica a classe da rodada para toda a linha\n  if (rodadaClasse) {\n    tableRow.classList.add(rodadaClasse);\n  }\n\n  // Preenche células vazias se a linha não tiver o número total de minutos\n  const colunasRestantes = minutos.length - row.slice(1).length;\n  for (let i = 0; i < colunasRestantes; i++) {\n    const emptyCell = document.createElement(\"td\");\n    emptyCell.innerText = \"\";\n    tableRow.appendChild(emptyCell);\n  }\n\n  // Adiciona as colunas adicionais ao final da linha\n  const porcentagemMercadoCell = document.createElement(\"td\");\n  porcentagemMercadoCell.innerText = calcularPorcentagemLinha(\n    rowIndex,\n    resultadosMercados[mercado]\n  );\n  tableRow.appendChild(porcentagemMercadoCell);\n\n  const subidasCell = document.createElement(\"td\");\n  subidasCell.classList.add(\"subidasCell\");\n  subidasCell.innerText = calcularSubidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(subidasCell);\n\n  const lateralizacoesOverCell = document.createElement(\"td\");\n  lateralizacoesOverCell.classList.add(\"lateralizacoesOverCell\");\n  lateralizacoesOverCell.innerText = calcularLateralizacaoVerde(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesOverCell);\n\n  const descidasCell = document.createElement(\"td\");\n  descidasCell.classList.add(\"descidasCell\");\n  descidasCell.innerText = calcularDescidasLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado\n  );\n  tableRow.appendChild(descidasCell);\n\n  const lateralizacoesUnderCell = document.createElement(\"td\");\n  lateralizacoesUnderCell.classList.add(\"lateralizacoesUnderCell\");\n  lateralizacoesUnderCell.innerText = calcularLateralizacaoVermelho(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    mercado\n  );\n  tableRow.appendChild(lateralizacoesUnderCell);\n\n  const golsCell = document.createElement(\"td\");\n  golsCell.classList.add(\"golsCell\");\n  golsCell.innerText = calcularGolsLinha(row);\n  tableRow.appendChild(golsCell);\n\n  table.appendChild(tableRow);\n});\n\n\n    calcularMediaPorcetagensLinhas(mercadoTabela);\n    calcularMediaSubidas(mercadoTabela);\n    calcularMediaLateralizacaoOver(mercadoTabela);\n    calcularMediaDescidas(mercadoTabela);\n    calcularMediaLateralizacoesUnder(mercadoTabela);\n    calcularMediaGols(mercadoTabela);\n    adicionarLinhaSomaGols(mercadoTabela, mosaico);\n    adicionarLinhaOscilacaoColunas(mercadoTabela, mosaico);\n  });\n\n  ativarDestaquePontos();\n}\n\n// Funções auxiliares\nfunction calcularPorcentagemLinha(rowIndex, resultadosMercado) {\n  const total = resultadosMercado[rowIndex].slice(1).length;\n  const ocorrencias = resultadosMercado[rowIndex]\n    .slice(1)\n    .filter(Boolean).length;\n  return `${Math.round((ocorrencias / total) * 100)}%`;\n}\n\nfunction calcularSubidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    false\n  );\n}\n\nfunction calcularDescidasLinha(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVerde(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    true,\n    true\n  );\n}\n\nfunction calcularLateralizacaoVermelho(rowIndex, resultadosMercados, mercado) {\n  return calcularMovimentosLinha(\n    rowIndex,\n    resultadosMercados,\n    mercado,\n    false,\n    false\n  );\n}\n\n// function calcularLateralizacoesLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado) {\n//     return calcularMovimentosLinha(rowIndex, resultadosMercados, mercadoAtual, mercadoComparado, mercadoComparado);\n// }\n\n\nfunction calcularGolsLinha(row) {\n  return row.slice(1).reduce((total, value) => {\n    // Extrai os placares usando uma expressão regular\n    const placares = value.match(/(\\d+)-(\\d+)/);\n    if (placares) {\n      const golsTime1 = parseInt(placares[1]);\n      const golsTime2 = parseInt(placares[2]);\n      return total + golsTime1 + golsTime2;\n    } else {\n      return total; // Retorna o total inalterado se não houver placares correspondentes\n    }\n  }, 0);\n}\n\n\n\n\nfunction calcularMovimentosLinha(\n  rowIndex,\n  resultadosMercados,\n  mercado,\n  condicao1,\n  condicao2\n) {\n  let contador = 0;\n  const currentRow = resultadosMercados[mercado][rowIndex];\n  const nextRow = resultadosMercados[mercado][rowIndex + 1];\n\n  if (!nextRow) return contador;\n\n  currentRow.slice(1).forEach((result, colIndex) => {\n    const nextResult = nextRow[colIndex + 1];\n    if (result === condicao1 && nextResult === condicao2) {\n      contador++;\n    }\n  });\n\n  return contador;\n}\n\nfunction gerarDadosContagem(resultados) {\n  console.log(resultados);\n}\n\nfunction calcularOscilacaoPorMercado(mosaico, resultadosMercados) {\n  return [...mercadosUnderOver, ...mercadosAmbas].map((mercado) => {\n    let acumulado = 0;\n    const oscilacoes = [];\n\n    for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n      const currentRow = resultadosMercados[mercado][rowIndex].slice(1);\n      const nextRow = resultadosMercados[mercado][rowIndex + 1].slice(1);\n\n      currentRow.forEach((result, colIndex) => {\n        const nextResult = nextRow[colIndex];\n\n        if (result === nextResult) {\n          acumulado += 0;\n        } else {\n          acumulado += result ? 1 : -1;\n        }\n        oscilacoes.push(acumulado);\n      });\n    }\n\n    return {\n      mercado,\n      oscilacoes,\n    };\n  });\n}\n\nfunction gerarLabelsHoraMaisMinuto(minutos, mosaico) {\n  const labels = [];\n\n  for (let rowIndex = mosaico.length - 2; rowIndex >= 0; rowIndex--) {\n    const currentRow = mosaico[rowIndex].slice(1);\n    const hora = mosaico[rowIndex][0];\n\n    for (let label = 0; label < currentRow.length; label++) {\n      labels.push(\n        `${hora < 10 ? \"0\" + hora : hora}:${\n          minutos[label] < 10 ? \"0\" + minutos[label] : minutos[label]\n        }`\n      );\n    }\n  }\n\n  return labels;\n}\n\nfunction ativarDestaquePontos() {\n  const cellsWithPoints = document.querySelectorAll(\"td span.pontosGraficos\");\n\n  cellsWithPoints.forEach((span) => {\n    span.addEventListener(\"click\", function () {\n      const ponto = this.innerText; // Ponto do span clicado\n      const isHighlighted = this.parentElement.classList.contains(\"highlight\"); // Verifica se já está destacado\n\n      if (isHighlighted) {\n        // Remove o destaque de todas as células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.remove(\"highlight\");\n          }\n        });\n      } else {\n        // Remove os destaques globais\n        document.querySelectorAll(\".highlight\").forEach((el) => {\n          el.classList.remove(\"highlight\");\n        });\n\n        // Adiciona o destaque nas células com o mesmo ponto\n        const allCells = document.querySelectorAll(\"td span.pontosGraficos\");\n        allCells.forEach((otherSpan) => {\n          if (otherSpan.innerText === ponto) {\n            otherSpan.parentElement.classList.add(\"highlight\");\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction gerarTodosGraficos(dadosOscilacao, labelsHoraMaisMinuto) {\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosUnderOver,\n    \"graficoUnderOver\",\n    \"controlesUnderOver\",\n    labelsHoraMaisMinuto\n  );\n  geraGraficosPorCategoria(\n    dadosOscilacao,\n    mercadosAmbas,\n    \"graficoAmbas\",\n    \"controlesAmbas\",\n    labelsHoraMaisMinuto\n  );\n}\n\nfunction geraGraficosPorCategoria(\n  dadosOscilacao,\n  mercadosIniciais,\n  canvasId,\n  controlesId,\n  labels\n) {\n  const ctx = document.getElementById(canvasId).getContext(\"2d\");\n\n  if (canvasId === \"graficoUnderOver\" && chartUnderOver) {\n    chartUnderOver.destroy();\n    chartUnderOver = null;\n  } else if (canvasId === \"graficoAmbas\" && chartAmbas) {\n    chartAmbas.destroy();\n    chartAmbas = null;\n  }\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosIniciais.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 3.5,\n      pointHoverRadius: 4,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  const data = {\n    labels,\n    datasets,\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            return ` ${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"HorÃ¡rio\",\n        },\n        ticks: {\n          maxRotation: 0,\n          autoSkip: true,\n          stepSize: 5,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Valores Acumulados\",\n        },\n      },\n    },\n  };\n\n  const chart = new Chart(ctx, {\n    type: \"line\",\n    data: data,\n    options: options,\n  });\n\n  if (canvasId === \"graficoUnderOver\") {\n    chartUnderOver = chart;\n  } else if (canvasId === \"graficoAmbas\") {\n    chartAmbas = chart;\n  }\n\n  configurarControleDeMercados(\n    dadosOscilacao,\n    mercadosIniciais,\n    chart,\n    controlesId\n  );\n}\n\nfunction configurarControleDeMercados(\n  dadosOscilacao,\n  mercadosIniciais,\n  chart,\n  controlesId\n) {\n  const controlesContainer = document.getElementById(controlesId);\n  controlesContainer.innerHTML = \"\";\n\n  dadosOscilacao.forEach((dados) => {\n    const mercado = dados.mercado;\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.id = `mercado-${mercado}-${controlesId}`;\n    checkbox.checked = mercadosIniciais.includes(mercado);\n\n    const label = document.createElement(\"label\");\n    label.htmlFor = `mercado-${mercado}-${controlesId}`;\n    label.textContent = mercado.toUpperCase();\n\n    checkbox.addEventListener(\"change\", () => {\n      atualizarGrafico(dadosOscilacao, chart, controlesId);\n    });\n\n    const container = document.createElement(\"div\");\n    container.style.marginRight = \"10px\";\n    container.style.display = \"inline-block\";\n    container.appendChild(checkbox);\n    container.appendChild(label);\n    controlesContainer.appendChild(container);\n  });\n}\n\nfunction atualizarGrafico(dadosOscilacao, chart, controlesId) {\n  const mercadosSelecionados = Array.from(\n    document.querySelectorAll(`#${controlesId} input:checked`)\n  ).map((input) =>\n    input.id.replace(`mercado-`, \"\").replace(`-${controlesId}`, \"\")\n  );\n\n  const datasets = dadosOscilacao\n    .filter((dados) => mercadosSelecionados.includes(dados.mercado))\n    .map((dados) => ({\n      label: dados.mercado.toUpperCase(),\n      data: dados.oscilacoes,\n      borderColor: todasCores[dados.mercado],\n      backgroundColor: todasCores[dados.mercado],\n      fill: false,\n      tension: 0.4,\n      pointStyle: \"circle\",\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: \"transparent\",\n      pointBorderColor: todasCores[dados.mercado],\n    }));\n\n  chart.data.datasets = datasets;\n  chart.update();\n}\n\n\n\nreturn (_ctx, _cache) => {\n  const _component_PrimeTextarea = __nuxt_component_0\n  const _component_PrimeDropdown = __nuxt_component_1\n  const _component_PrimeButton = __nuxt_component_2\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _hoisted_3,\n      _createElementVNode(\"div\", _hoisted_4, [\n        _hoisted_5,\n        _createVNode(_component_PrimeTextarea, {\n          modelValue: dadosAnalise.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((dadosAnalise).value = $event)),\n          placeholder: \"Insira os dados\",\n          class: \"w-full\",\n          rows: \"4\"\n        }, null, 8, [\"modelValue\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createVNode(_component_PrimeDropdown, {\n            modelValue: campeonatoSelecionado.value,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((campeonatoSelecionado).value = $event)),\n            options: campeonatos.value,\n            \"option-label\": \"label\",\n            \"option-value\": \"value\",\n            placeholder: \"Selecione um campeonato\",\n            class: \"w-full\"\n          }, null, 8, [\"modelValue\", \"options\"])\n        ]),\n        _createVNode(_component_PrimeButton, {\n          label: \"Analisar\",\n          severity: \"success\",\n          class: \"w-full\",\n          onClick: onClickAnalisar\n        })\n      ])\n    ]),\n    (showRanks.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rankings.value, (rank, index) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: index,\n              class: \"bg-white shadow-lg rounded-xl p-2\"\n            }, [\n              _createElementVNode(\"h2\", _hoisted_9, _toDisplayString(rank.title), 1),\n              _createElementVNode(\"table\", _hoisted_10, [\n                _hoisted_11,\n                _createElementVNode(\"tbody\", null, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(rank.data, (team, i) => {\n                    return (_openBlock(), _createElementBlock(\"tr\", {\n                      key: team.team,\n                      class: \"odd:bg-gray-50 even:bg-white\"\n                    }, [\n                      _createElementVNode(\"td\", _hoisted_12, _toDisplayString(i + 1), 1),\n                      _createElementVNode(\"td\", _hoisted_13, _toDisplayString(team.team), 1),\n                      _createElementVNode(\"td\", _hoisted_14, _toDisplayString(team.value), 1)\n                    ]))\n                  }), 128))\n                ])\n              ])\n            ]))\n          }), 128))\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_15, [\n      _createElementVNode(\"div\", null, [\n        _hoisted_16,\n        _hoisted_17,\n        _createElementVNode(\"div\", _hoisted_18, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[2] || (_cache[2] = $event => (showTable1.value = !showTable1.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_19, null, 512), [\n            [_vShow, showTable1.value]\n          ])\n        ])\n      ]),\n      _createElementVNode(\"div\", null, [\n        _hoisted_20,\n        _hoisted_21,\n        _createElementVNode(\"div\", _hoisted_22, [\n          _createVNode(_component_PrimeButton, {\n            type: \"button\",\n            class: \"btnTables\",\n            onClick: _cache[3] || (_cache[3] = $event => (showTable2.value = !showTable2.value))\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(\" Mostrar/Esconder Tabela \")\n            ]),\n            _: 1\n          }),\n          _withDirectives(_createElementVNode(\"table\", _hoisted_23, null, 512), [\n            [_vShow, showTable2.value]\n          ])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n}\n\n\n\nexport default _sfc_main",
      "start": 1742846401232,
      "end": 1742846401239,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1742846401240,
      "end": 1742846401240,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1742846401240,
      "end": 1742846401240,
      "order": "normal"
    }
  ]
}
